version: '3.6'

services:

  #----Start: EIS Base Images -- This Base images must be included for building any EIS servcies ----
  # Define ia_gobase service
  ia_gobase:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.gobase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          HOST_TIME_ZONE: ${HOST_TIME_ZONE}
    image: ${DOCKER_REGISTRY}ia_gobase:${EIS_VERSION}

  # Define ia_pybase service
  ia_pybase:
    depends_on:
      - ia_gobase
      - ia_common
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.pybase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_pybase:${EIS_VERSION}

  ia_common:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_common:${EIS_VERSION}

  #----End: EIS Base Images---- -- This Base images must be included for building any EIS servcies ----

  # Define ETCD UI service - must be included to view ETCD data over web UI
  ia_etcd_ui:
    build:
      context: $PWD/../EtcdUI
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_KEEPER_VERSION: ${ETCD_KEEPER_VERSION}
        EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_etcd_ui:${EIS_VERSION}
    network_mode: host
    restart: unless-stopped
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    environment:
      AppName: "EtcdUi"
      DEV_MODE: $DEV_MODE
    secrets:
        - ca_etcd
        - etcd_root_cert
        - etcd_root_key
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${EIS_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges


  #----Start: EIS Containers ----
# Define VideoIngestion service
  ia_video_ingestion:
    depends_on:
      - ia_pybase
    build:
      context: ../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion
    hostname: ia_video_ingestion
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion"
      # Setting Visualizer as a subscriber here since FpsCalculator uses
      # the same keys as visualizer to subscribe over both VideoIngestion
      # and VideoAnalytics
      Clients: "VideoAnalytics"
      CertType: "zmq"
      DEV_MODE: ${DEV_MODE}
      SOCKET_DIR: ${SOCKET_DIR}
      PubTopics: "camera1_stream"
      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      camera1_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "$PWD/test_videos:/EIS/test_videos"
      - "${EIS_INSTALL_PATH}/sockets:${SOCKET_DIR}"
    command: ["--log-dir", "/EIS/video_ingestion_logs"]
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${EIS_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    secrets:
        - ca_etcd
        - etcd_VideoIngestion_cert
        - etcd_VideoIngestion_key

  # Define VideoAnalytics service
  ia_video_analytics:
    depends_on:
      - ia_pybase
    build:
      context: $PWD/../VideoAnalytics
      dockerfile: $PWD/../VideoAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}ia_video_analytics:${EIS_VERSION}
    container_name: ia_video_analytics
    hostname: ia_video_analytics
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoAnalytics"
      Clients : "Visualizer,FactoryControlApp,OpcuaExport,ImageStore,InfluxDBConnector"
      CertType: "zmq"
      DEV_MODE: ${DEV_MODE}
      SubTopics: "VideoIngestion/camera1_stream"
      SOCKET_DIR: ${SOCKET_DIR}
      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      camera1_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PubTopics: "camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
    privileged: true
    volumes:
      - "/dev:/dev"
      - "$PWD/test_videos:/EIS/test_videos"
      - "${EIS_INSTALL_PATH}/sockets:${SOCKET_DIR}"
    devices:
      - "/dev/dri"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    secrets:
        - ca_etcd
        - etcd_VideoAnalytics_cert
        - etcd_VideoAnalytics_key

  # Define Visualizer service
  ia_visualizer:
    depends_on:
      - ia_pybase
    build:
      context: $PWD/../Visualizer
      dockerfile: $PWD/../Visualizer/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}ia_visualizer:${EIS_VERSION}
    container_name: ia_visualizer
    hostname: ia_visualizer
    network_mode: host
    ipc: host
    restart: unless-stopped
    environment:
      AppName: "Visualizer"
      CertType: "zmq"
      DISPLAY: ${DISPLAY}
      IMAGE_DIR: ${EIS_INSTALL_PATH}/saved_images
      SubTopics: "VideoAnalytics/camera1_stream_results"
      # Use IPC mode (zmq_ipc) when VideoIngestion, VideoAnalytics and Visualizer
      # based containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      camera1_stream_results_cfg : "zmq_tcp,127.0.0.1:65013"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
      DEV_MODE: ${DEV_MODE}
    privileged: true
    volumes:
      - "${EIS_INSTALL_PATH}/saved_images:${EIS_INSTALL_PATH}/saved_images"
      - "/tmp/.X11-unix:/tmp/.X11-unix"
      - "${EIS_INSTALL_PATH}/sockets:${SOCKET_DIR}"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    secrets:
        - ca_etcd
        - etcd_Visualizer_cert
        - etcd_Visualizer_key


  # Define influxdb connector service
  ia_influxdbconnector:
    depends_on:
      - ia_gobase
    build:
      context: $PWD/../InfluxDBConnector
      dockerfile: $PWD/../InfluxDBConnector/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        INFLUXDB_VERSION: ${INFLUXDB_VERSION}
    image: ${DOCKER_REGISTRY}ia_influxdbconnector:${EIS_VERSION}
    container_name: ia_influxdbconnector
    hostname: ia_influxdbconnector
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "InfluxDBConnector"
      CertType: "zmq,pem"
      DEV_MODE: ${DEV_MODE}
      #SubTopics is mainly for the stream data to subscribe
      #and push to InfluxDB
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      #PubTopics is mainly for point data to publish
      PubTopics: "point_data,point_classifier_results"
      point_data_cfg: "zmq_tcp,127.0.0.1:65015"
      point_classifier_results_cfg: "zmq_tcp,127.0.0.1:65016"
      #Server is for both point data and stream data
      Server: "zmq_tcp,127.0.0.1:8675"
      Clients: "Visualizer"
    volumes:
      - "${EIS_INSTALL_PATH}/data/influxdata:/influxdata"
      - "./config/influxdb.conf:/etc/influxdb/influxdb.conf"
      - "./config/influxdb_devmode.conf:/etc/influxdb/influxdb_devmode.conf"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${EIS_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    secrets:
        - ca_etcd
        - etcd_InfluxDBConnector_cert
        - etcd_InfluxDBConnector_key


  # Define telegraf service
  ia_telegraf:
    depends_on:
      - ia_pybase
    build:
      context: $PWD/../Telegraf
      dockerfile: $PWD/../Telegraf/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
    container_name: ia_telegraf
    hostname: ia_telegraf
    network_mode: host
    image: ${DOCKER_REGISTRY}ia_telegraf:${EIS_VERSION}
    restart: unless-stopped
    environment:
      AppName: "Telegraf"
      CertType: ""
      DEV_MODE: ${DEV_MODE}
    volumes:
      - "./config/telegraf.conf:/etc/Telegraf/telegraf.conf"
      - "./config/telegraf_devmode.conf:/etc/Telegraf/telegraf_devmode.conf"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
       test: ["CMD-SHELL", "exit", "0"]
       interval: ${HEALTHCHECK_DURATION}
    user: ${EIS_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    secrets:
        - ca_etcd
        - etcd_InfluxDBConnector_cert
        - etcd_InfluxDBConnector_key

  # Define ia_gopybase service - This base images is required to build ia_data_analytics
  ia_gopybase:
    depends_on:
      - ia_pybase
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.gopybase
      args:
        EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_gopybase:${EIS_VERSION}
  # End ia_gopybase service - This base images is required to build ia_data_analytics
  
  # Define DataAnalytics service
  ia_data_analytics:
    depends_on:
      - ia_gopybase
    build:
      context: $PWD/../TimeSeriesAnalytics/
      dockerfile: $PWD/../TimeSeriesAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
    image: ${DOCKER_REGISTRY}ia_data_analytics:${EIS_VERSION}
    container_name: ia_data_analytics
    hostname: ia_data_analytics
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "Kapacitor"
      CertType: "pem"
      DEV_MODE: ${DEV_MODE}
    volumes:
      - "./config/kapacitor.conf:/etc/kapacitor/kapacitor.conf"
      - "./config/kapacitor_devmode.conf:/etc/kapacitor/kapacitor_devmode.conf"
    devices:
      - "/dev/dri"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${EIS_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    secrets:
        - ca_etcd
        - etcd_Kapacitor_cert
        - etcd_Kapacitor_key
  
  
  
  # Define Imagestore service which hosts redis and minio dbs
  ia_imagestore:
    depends_on:
      - ia_gobase
    build:
      context: $PWD/../ImageStore
      dockerfile: $PWD/../ImageStore/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        MINIO_VERSION: ${MINIO_VERSION}
        EIS_UID: ${EIS_UID}
    container_name: ia_imagestore
    hostname: ia_imagestore
    network_mode: host
    image: ${DOCKER_REGISTRY}ia_imagestore:${EIS_VERSION}
    restart: unless-stopped
    environment:
      AppName: "ImageStore"
      CertType: "zmq"  
      DEV_MODE: ${DEV_MODE}
      Server: "zmq_tcp,127.0.0.1:5669"
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
    command: ["-log_dir", "/EIS/go/src/IEdgeInsights/log/imagestore_logs"]
    volumes:
      - "${EIS_INSTALL_PATH}/data:/data"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${EIS_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    secrets:
        - ca_etcd
        - etcd_ImageStore_cert
        - etcd_ImageStore_key
  
  
  # Define FactoryControlApp service
  ia_factoryctrl_app:
    depends_on:
      - ia_pybase
    build:
      context: $PWD/../FactoryControlApp
      dockerfile: $PWD/../FactoryControlApp/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    image: ${DOCKER_REGISTRY}ia_factoryctrl_app:${EIS_VERSION}
    container_name: ia_factoryctrl_app
    hostname: ia_factoryctrl_app
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "FactoryControlApp"
      CertType: "zmq"
      DEV_MODE: ${DEV_MODE}
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg : "zmq_tcp,127.0.0.1:65013"
      # Uncomment this & replace <topic> with actual topic name if IPC is needed
      #<<topic>_cfg: "zmq_ipc,${SOCKET_DIR}/"
      SOCKET_DIR: ${SOCKET_DIR}
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    volumes:
      - "${EIS_INSTALL_PATH}/sockets:${SOCKET_DIR}"
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${EIS_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    secrets:
        - ca_etcd
        - etcd_FactoryControlApp_cert
        - etcd_FactoryControlApp_key


  # Define OpcuaExport service
  ia_opcua_export:
    depends_on:
      - ia_gobase
    build:
      context: $PWD/../OpcuaExport
      dockerfile: $PWD/../OpcuaExport/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_opcua_export:${EIS_VERSION}
    network_mode: host
    restart: unless-stopped
    container_name: ia_opcua_export
    hostname: ia_opcua_export
    environment:
      AppName: "OpcuaExport"
      CertType: "zmq,der"
      PubTopics: "cam_serial1_results,cam_serial2_results"
      OpcuaExportCfg: "opcua,localhost:65003"
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      DEV_MODE: ${DEV_MODE}
    secrets:
        - ca_etcd
        - etcd_OpcuaExport_cert
        - etcd_OpcuaExport_key
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${EIS_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges


secrets:
  ca_etcd:
    file: provision/Certificates/ca/ca_certificate.pem
  etcd_FactoryControlApp_cert:
    file: provision/Certificates/FactoryControlApp/FactoryControlApp_client_certificate.pem
  etcd_FactoryControlApp_key:
    file: provision/Certificates/FactoryControlApp/FactoryControlApp_client_key.pem
  etcd_ImageStore_cert:
    file: provision/Certificates/ImageStore/ImageStore_client_certificate.pem
  etcd_ImageStore_key:
    file: provision/Certificates/ImageStore/ImageStore_client_key.pem
  etcd_InfluxDBConnector_cert:
    file: provision/Certificates/InfluxDBConnector/InfluxDBConnector_client_certificate.pem
  etcd_InfluxDBConnector_key:
    file: provision/Certificates/InfluxDBConnector/InfluxDBConnector_client_key.pem
  etcd_Kapacitor_cert:
    file: provision/Certificates/Kapacitor/Kapacitor_client_certificate.pem
  etcd_Kapacitor_key:
    file: provision/Certificates/Kapacitor/Kapacitor_client_key.pem
  etcd_OpcuaExport_cert:
    file: provision/Certificates/OpcuaExport/OpcuaExport_client_certificate.pem
  etcd_OpcuaExport_key:
    file: provision/Certificates/OpcuaExport/OpcuaExport_client_key.pem
  etcd_VideoAnalytics_cert:
    file: provision/Certificates/VideoAnalytics/VideoAnalytics_client_certificate.pem
  etcd_VideoAnalytics_key:
    file: provision/Certificates/VideoAnalytics/VideoAnalytics_client_key.pem
  etcd_VideoIngestion_cert:
    file: provision/Certificates/VideoIngestion/VideoIngestion_client_certificate.pem
  etcd_VideoIngestion_key:
    file: provision/Certificates/VideoIngestion/VideoIngestion_client_key.pem
  etcd_Visualizer_cert:
    file: provision/Certificates/Visualizer/Visualizer_client_certificate.pem
  etcd_Visualizer_key:
    file: provision/Certificates/Visualizer/Visualizer_client_key.pem
  etcd_root_cert:
    file: provision/Certificates/root/root_client_certificate.pem
  etcd_root_key:
    file: provision/Certificates/root/root_client_key.pem
