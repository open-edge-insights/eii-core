version: '3'

services:

  # Define a log_rotate service
  ia_log_rotate:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.logrotate
      args:
        LOG_ROTATE_VERSION: ${LOG_ROTATE_VERSION}
    container_name: ia_log_rotate
    hostname: ia_log_rotate
    image: ia/logrotate:${ETA_VERSION}
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      LOGS_DIRECTORIES: ${ETA_INSTALL_PATH}/logs
      # Logrotate can rotate logfile according to the following intervals:
      # hourly
      # daily
      # weekly
      # monthly
      # yearly
      # For more details, refer the following link
      # https://hub.docker.com/r/blacklabelops/logrotate/
      LOGROTATE_INTERVAL: "daily"
      LOGROTATE_COPIES: ${LOGROTATE_COPIES}
      LOGROTATE_DATEFORMAT: "%Y%m%d_%H:%M:%S"
      TZ: ${HOST_TIME_ZONE}
    volumes:
      - "${ETA_INSTALL_PATH}/logs:${ETA_INSTALL_PATH}/logs"
    healthcheck:
       test: ["CMD-SHELL", "exit", "0"]
       interval: ${HEALTHCHECK_DURATION}
    
  #---- Start: ETA Dependency Services----
  # Define an InfluxDB service
  ia_influxdb:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.influxdb
      args:
        INFLUXDB_VERSION: ${INFLUXDB_VERSION}
    container_name: ia_influxdb
    hostname: ia_influxdb
    image: ia/influxdb:${ETA_VERSION}
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      NO_PROXY: ${NO_PROXY}
      no_proxy: ${NO_PROXY}
      INFLUXDB_HTTP_AUTH_ENABLED: ${INFLUX_AUTH_VALUE}
    volumes:
      - "${ETA_INSTALL_PATH}/config/influxdb.conf:/etc/influxdb/influxdb.conf"
    ports:
      - "${INFLUXDB_PORT}:${INFLUXDB_PORT}"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
       test: ["CMD-SHELL", "exit", "0"]
       interval: ${HEALTHCHECK_DURATION}

 # Define telegraf service
  ia_telegraf:
    depends_on:
      - ia-gopybase
    links:
      - ia_data_agent
      - ia_influxdb
    external_links:
      - ia_mqtt
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.telegraf
      args: 
        ETA_VERSION: ${ETA_VERSION}
    container_name: ia_telegraf
    hostname: ia_telegraf
    image: ia/telegraf:${ETA_VERSION}
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      NO_PROXY: ${NO_PROXY}
      no_proxy: ${NO_PROXY}
      GRPC_SERVER: ${GRPC_SERVER_HOST}
      HOST_IP: ${HOST_IP}
    volumes:
      - "${ETA_INSTALL_PATH}/config/telegraf.conf:/root/go/src/ElephantTrunkArch/Telegraf/Telegraf.conf"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
       test: ["CMD-SHELL", "exit", "0"]
       interval: ${HEALTHCHECK_DURATION}
      

  # Define an Redis service
  ia_redis:
    links:
       - ia_data_agent
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.redis
      args:
        REDIS_VERSION: ${REDIS_VERSION}
    container_name: ia_redis
    hostname: ia_redis
    image: ia/redis:${ETA_VERSION}
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      NO_PROXY: ${NO_PROXY}
      no_proxy: ${NO_PROXY}
      GRPC_SERVER: ${GRPC_SERVER_HOST}
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}

  #---- End: ETA Dependency Services----

  #----Start: ETA Base Images----
  # Define ia-gobase service
  ia-gobase:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.gobase
      args:
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
    image: ia/gobase:${ETA_VERSION}
    depends_on:
      - ia_log_rotate

  # Define ia-pybase service
  ia-pybase:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.pybase
      args:
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
    image: ia/pybase:${ETA_VERSION}
    depends_on:
      - ia_log_rotate

  # Define ia-gopybase service
  ia-gopybase:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.gopybase
      args:
        ETA_VERSION: ${ETA_VERSION}
    image: ia/gopybase:${ETA_VERSION}
    depends_on:
      - ia_log_rotate

  #----End: ETA Base Images----

  #----Start: ETA Containers ----
  # Define DataAgent service
  ia_data_agent:
    depends_on:
      - ia-gobase
    links:
      - ia_influxdb
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.da
      args:
        ETA_VERSION: ${ETA_VERSION}
    image: ia/data_agent:${ETA_VERSION}
    container_name: ia_data_agent
    hostname: ia_data_agent
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      NO_PROXY: ${NO_PROXY}
      no_proxy: ${NO_PROXY}
    volumes:
      - "${ETA_INSTALL_PATH}/secret_store:/vault/file"
      - "${ETA_INSTALL_PATH}/vault_secret_file:/root/go/src/ElephantTrunkArch/DataAgent/vault_secret_file"
    ports:
      - "${GRPC_EXTERNAL_PORT}:${GRPC_EXTERNAL_PORT}"
      - "${GRPC_INTERNAL_PORT}:${GRPC_INTERNAL_PORT}"
      - "${OPCUA_PORT}:${OPCUA_PORT}"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
      
  # Define DataAnalytics service
  ia_data_analytics:
    links:
      - ia_data_agent
      - ia_influxdb
      - ia_redis
    external_links:
       -  ia_mqtt
    
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.classifier
      args:
        ETA_VERSION: ${ETA_VERSION}
    image: ia/data_analytics:${ETA_VERSION}
    container_name: ia_data_analytics
    hostname: ia_data_analytics
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      KAPACITOR_HOSTNAME: ia_data_analytics
      KAPACITOR_URL: https://ia_data_analytics:9092/
      KAPACITOR_INFLUXDB_0_URLS_0: https://ia_influxdb:8086/
      GRPC_SERVER: ${GRPC_SERVER_HOST}
      NO_PROXY: ${NO_PROXY}
      no_proxy: ${NO_PROXY}
    volumes:
      - "${ETA_INSTALL_PATH}/config/kapacitor.conf:/etc/kapacitor/kapacitor.conf"
      - "${ETA_INSTALL_PATH}/config/factory.json:/ETA/factory.json"
      - "${ETA_INSTALL_PATH}/config/factory_prod.json:/ETA/factory_prod.json"
      - "${ETA_INSTALL_PATH}/config/ref:/ETA/agent/ref"
      - "${ETA_INSTALL_PATH}/config/ref_prod:/ETA/agent/ref_prod"
      - "${ETA_INSTALL_PATH}/logs/classifier_logs:/ETA/classifier_logs"
    expose:
      - "9092"
    command: ["--config", "${CONFIG_FILE}", "--log", "${LOG_LEVEL}"]
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    

  # Define YumeiApp service      
  ia_yumei_app:
    links:
       - ia_data_analytics
    external_links:
       - ia_mqtt
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.yumeiapp
      args:
        ETA_VERSION: ${ETA_VERSION}
    image: ia/yumei_app:${ETA_VERSION}
    container_name: ia_yumei_app
    hostname: ia_yumei_app
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      GRPC_SERVER: ${GRPC_SERVER_HOST}
      NO_PROXY: ${NO_PROXY},${HOST_IP}
      no_proxy: ${NO_PROXY},${HOST_IP}
    volumes:
      - "${ETA_INSTALL_PATH}/logs/yumei_app_logs:/ETA/yumei_app_logs"
    command: ["--log", "${LOG_LEVEL}"]
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}

  # Define VideoIngestion service
  ia_video_ingestion:
    depends_on:
      - ia_influxdb
      - ia_redis
      - ia_data_analytics
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.vi
      args:
        ETA_VERSION: ${ETA_VERSION}
    image: ia/video_ingestion:${ETA_VERSION}
    container_name: ia_video_ingestion
    hostname: ia_video_ingestion
    network_mode: host
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      NO_PROXY: ${NO_PROXY},${HOST_IP}
      no_proxy: ${NO_PROXY},${HOST_IP}
    volumes:
      - "${ETA_INSTALL_PATH}/test_videos:/ETA/test_videos"
      - "${ETA_INSTALL_PATH}/config/factory.json:/ETA/factory.json"
      - "${ETA_INSTALL_PATH}/config/factory_prod.json:/ETA/factory_prod.json"
      - "${ETA_INSTALL_PATH}/config/ref:/ETA/agent/ref"
      - "${ETA_INSTALL_PATH}/config/ref_prod:/ETA/agent/ref_prod"
      - "${ETA_INSTALL_PATH}/logs/video_ingestion_logs:/ETA/video_ingestion_logs"
    command: ["--config", "${CONFIG_FILE}", "--log", "${LOG_LEVEL}"]
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}


networks:
  default:
    external:
      name: eta_docker_network

  #----End: ETA Containers ----
