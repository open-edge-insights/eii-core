version: '3.6'

services:

  #----Start: IEI Base Images----
  # Define ia_gobase service
  ia_gobase:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.gobase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          HOST_TIME_ZONE: ${HOST_TIME_ZONE}
    image: ia_gobase:${IEI_VERSION}

  # Define ia_pybase service
  ia_pybase:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.pybase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          IEI_VERSION: ${IEI_VERSION}
    image: ia_pybase:${IEI_VERSION}

  # Define ia_gopybase service
  ia_gopybase:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.gopybase
      args:
        IEI_VERSION: ${IEI_VERSION}
    image: ia_gopybase:${IEI_VERSION}

  #----End: IEI Base Images----

  #----Start: IEI Containers ----
  # Define influxdb connector service
  ia_influxdbconnector:
    build:
      context: ../
      dockerfile: $PWD/../InfluxDBConnector/Dockerfile
      args:
        IEI_VERSION: ${IEI_VERSION}
        INFLUXDB_VERSION: ${INFLUXDB_VERSION}
        IEI_UID: ${IEI_UID}
    image: ia_influxdbconnector:${IEI_VERSION}
    container_name: ia_influxdbconnector
    hostname: ia_influxdbconnector
    network_mode: host
    environment:
      AppName: "InfluxDBConnector"
      CertType: "zmq"
      no_proxy: ${NO_PROXY}
      DEV_MODE: ${DEV_MODE}
      #SubTopics is mainly for the stream data to subscribe
      #and push to InfluxDB
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      #PubTopics is mainly for point data to publish
      PubTopics: "point_data,point_classifier_results"
      point_data_cfg: "zmq_tcp,127.0.0.1:65015"
      point_classifier_results_cfg: "zmq_tcp,127.0.0.1:65016"
      #Server is for both point data and stream data
      Server: "zmq_tcp,127.0.0.1:8675"
      Clients: "Visualizer"
    volumes:
      - "${IEI_INSTALL_PATH}/data/influxdata:/influxdata"
      - "${IEI_INSTALL_PATH}/config/influxdb.conf:/etc/influxdb/influxdb.conf"
      - "${IEI_INSTALL_PATH}/config/influxdb_devmode.conf:/etc/influxdb/influxdb_devmode.conf"
    command: ["-stderrthreshold", "${GO_LOG_LEVEL}"]
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define telegraf service
  ia_telegraf:
    build:
      context: ../
      dockerfile: $PWD/../Telegraf/Dockerfile
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
    container_name: ia_telegraf
    hostname: ia_telegraf
    network_mode: host
    image: ia_telegraf:${IEI_VERSION}
    restart: unless-stopped
    environment:
      AppName: "Telegraf"
      CertType: "zmq"
      INFLUX_SERVER: ${INFLUX_SERVER}
      INFLUXDB_PORT: ${INFLUXDB_PORT}
      no_proxy: ${NO_PROXY}
      DEV_MODE: ${DEV_MODE}
      HOST_IP: ${HOST_IP}
    volumes:
      - "${IEI_INSTALL_PATH}/grpc_int_ssl_secrets:/etc/ssl/grpc_int_ssl_secrets"
      - "${IEI_INSTALL_PATH}/config/telegraf.conf:/etc/Telegraf/telegraf.conf"
      - "${IEI_INSTALL_PATH}/config/telegraf_devmode.conf:/etc/Telegraf/telegraf_devmode.conf"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
       test: ["CMD-SHELL", "exit", "0"]
       interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define Imagestore service which hosts redis and minio dbs
  ia_imagestore:
    build:
      context: ../
      dockerfile: $PWD/../ImageStore/Dockerfile
      args:
        IEI_VERSION: ${IEI_VERSION}
        MINIO_VERSION: ${MINIO_VERSION}
        IEI_UID: ${IEI_UID}
    container_name: ia_imagestore
    hostname: ia_imagestore
    network_mode: host
    image: ia_imagestore:${IEI_VERSION}
    restart: unless-stopped
    environment:
      AppName: "ImageStore"
      CertType: "zmq"  
      no_proxy: ${NO_PROXY}
      DEV_MODE: ${DEV_MODE}
      GO_LOG_LEVEL: ${GO_LOG_LEVEL}
      GO_VERBOSE: ${GO_VERBOSE}
      Server: "zmq_tcp,127.0.0.1:5669"
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
    command: ["-log_dir", "/IEI/go/src/IEdgeInsights/log/imagestore_logs", "-stderrthreshold", "${GO_LOG_LEVEL}", "-v", "${GO_VERBOSE}"]
    volumes:
      - "${IEI_INSTALL_PATH}/data:/data"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define DataAnalytics service
  ia_data_analytics:
    build:
      context: ../
      dockerfile: $PWD/../DataAnalytics/PointDataAnalytics/Dockerfile
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
    image: ia_data_analytics:${IEI_VERSION}
    container_name: ia_data_analytics
    hostname: ia_data_analytics
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "Kapacitor"
      CertType: "zmq"
      KAPACITOR_URL: https://${KAPACITOR_SERVER}:${KAPACITOR_PORT}/
      KAPACITOR_UNSAFE_SSL: "false"
      KAPACITOR_INFLUXDB_0_URLS_0: https://${KAPACITOR_SERVER}:${INFLUXDB_PORT}/
      KAPACITOR_SERVER: ${KAPACITOR_SERVER}
      no_proxy: ${NO_PROXY}
      KAPACITOR_PORT: ${KAPACITOR_PORT}
      PY_LOG_LEVEL: ${PY_LOG_LEVEL}
    volumes:
      - "${IEI_INSTALL_PATH}/grpc_int_ssl_secrets:/etc/ssl/grpc_int_ssl_secrets"
      - "${IEI_INSTALL_PATH}/config/kapacitor.conf:/etc/kapacitor/kapacitor.conf"
      - "${IEI_INSTALL_PATH}/config/kapacitor_devmode.conf:/etc/kapacitor/kapacitor_devmode.conf"
    ports:
      - "${KAPACITOR_PORT}:${KAPACITOR_PORT}"
    command: ["${PY_LOG_LEVEL}", "${DEV_MODE}"]
    devices:
      - "/dev/dri"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define VideoIngestion service
  ia_video_ingestion:
    build:
      context: ../
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
        IEI_USER_NAME: ${IEI_USER_NAME}
    image: ia_video_ingestion:${IEI_VERSION}
    container_name: ia_video_ingestion
    hostname: ia_video_ingestion
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion"
      # Setting Visualizer as a subscriber here since FpsCalculator uses
      # the same keys as visualizer to subscribe over both VideoIngestion
      # and VideoAnalytics
      Clients: "VideoAnalytics,Visualizer"
      CertType: "zmq"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${NO_PROXY},${RTSP_CAMERA_IP}
      DEBIAN_FRONTEND: noninteractive
      MFX_HOME: "/opt/intel/mediasdk/"
      PKG_CONFIG_PATH: "/opt/intel/mediasdk"
      LIBVA_DRIVERS_PATH: "/usr/lib/x86_64-linux-gnu/dri/"
      LIBVA_DRIVER_NAME: "iHD"
      LD_RUN_PATH: "/usr/lib"
      LD_LIBRARY_PATH: "/opt/intel/mediasdk/lib/:/opt/intel/mediasdk/share/mfx/samples"
      TERM: "xterm"
      GST_PLUGIN_PATH: "/usr/local/lib/gstreamer-1.0"
      GST_DEBUG: ${GST_DEBUG}
      PROFILING: ${PROFILING}
      SOCKET_DIR: ${SOCKET_DIR}
      PubTopics: "camera1_stream"
      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      camera1_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "$PWD/test_videos:/IEI/test_videos"
      - "${IEI_INSTALL_PATH}/sockets:${SOCKET_DIR}"
    command: ["--log-dir", "/IEI/video_ingestion_logs", "--log", "${PY_LOG_LEVEL}"]
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define VideoAnalytics service
  ia_video_analytics:
    build:
      context: ../
      dockerfile: $PWD/../DataAnalytics/VideoAnalytics/Dockerfile
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
        IEI_USER_NAME: ${IEI_USER_NAME}
    image: ia_video_analytics:${IEI_VERSION}
    container_name: ia_video_analytics
    hostname: ia_video_analytics
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoAnalytics"
      Clients : "Visualizer,FactoryControlApp,OpcuaExport,ImageStore"
      CertType: "zmq"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${NO_PROXY}
      PY_LOG_LEVEL: ${PY_LOG_LEVEL}
      PROFILING: ${PROFILING}
      SubTopics: "VideoIngestion/camera1_stream"
      SOCKET_DIR: ${SOCKET_DIR}
      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      camera1_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PubTopics: "camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
    privileged: true
    volumes:
      - "/dev:/dev"
      - "$PWD/test_videos:/IEI/test_videos"
      - "${IEI_INSTALL_PATH}/sockets:${SOCKET_DIR}"
    devices:
      - "/dev/dri"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define Visualizer service
  ia_visualizer:
    build:
      context: ../
      dockerfile: $PWD/../tools/visualizer/Dockerfile
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
        IEI_USER_NAME: ${IEI_USER_NAME}
    image: ia_visualizer:${IEI_VERSION}
    container_name: ia_visualizer
    hostname: ia_visualizer
    network_mode: host
    ipc: host
    restart: unless-stopped
    environment:
      AppName: "Visualizer"
      CertType: "zmq"
      no_proxy: ${NO_PROXY}
      PY_LOG_LEVEL: ${PY_LOG_LEVEL}
      DISPLAY: ${DISPLAY}
      IMAGE_DIR: ${IEI_INSTALL_PATH}/saved_images
      SubTopics: "VideoAnalytics/camera1_stream_results"
      # Use IPC mode (zmq_ipc) when VideoIngestion, VideoAnalytics and Visualizer
      # based containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      camera1_stream_results_cfg : "zmq_tcp,127.0.0.1:65013"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PROFILING: ${PROFILING}
      DEV_MODE: ${DEV_MODE}
    privileged: true
    volumes:
      - "${IEI_INSTALL_PATH}/saved_images:${IEI_INSTALL_PATH}/saved_images"
      - "/tmp/.X11-unix:/tmp/.X11-unix"
      - "${IEI_INSTALL_PATH}/sockets:${SOCKET_DIR}"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define FactoryControlApp service
  ia_factoryctrl_app:
    build:
      context: ../
      dockerfile: $PWD/../FactoryControlApp/Dockerfile
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
        IEI_USER_NAME: ${IEI_USER_NAME}
    image: ia_factoryctrl_app:${IEI_VERSION}
    container_name: ia_factoryctrl_app
    hostname: ia_factoryctrl_app
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "FactoryControlApp"
      CertType: "zmq"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${NO_PROXY}
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg : "zmq_tcp,127.0.0.1:65013"
      # Uncomment this & replace <topic> with actual topic name if IPC is needed
      #<<topic>_cfg: "zmq_ipc,${SOCKET_DIR}/"
      SOCKET_DIR: ${SOCKET_DIR}
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    command: ["--log", "${PY_LOG_LEVEL}"]
    volumes:
      - "${IEI_INSTALL_PATH}/sockets:${SOCKET_DIR}"
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define OpcuaExport service
  ia_opcua_export:
    build:
      context: ../
      dockerfile: $PWD/../OpcuaExport/Dockerfile
      args:
        IEI_VERSION: ${IEI_VERSION}
    image: ia_opcua_export:${IEI_VERSION}
    network_mode: host
    restart: unless-stopped
    container_name: ia_opcua_export
    hostname: ia_opcua_export
    environment:
      AppName: "OpcuaExport"
      CertType: "zmq"
      no_proxy: ${NO_PROXY}
      PubTopics: "cam_serial1_results,cam_serial2_results"
      OpcuaExportCfg: "opcua,localhost:65003"
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      DEV_MODE: ${DEV_MODE}

  # Define ETCD UI service
  ia_etcd_ui:
    build:
      context: ../
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_KEEPER_VERSION: ${ETCD_KEEPER_VERSION}
        IEI_VERSION: ${IEI_VERSION}
    image: ia_etcd_ui:${IEI_VERSION}
    network_mode: host
    restart: unless-stopped
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    environment:
      AppName: "EtcdUi"
      no_proxy: ${NO_PROXY}
      DEV_MODE: $DEV_MODE
    secrets:
        - ca_cert
        - etcd_root_cert
        - etcd_root_key

secrets:
  ca_cert:
    file: Certificates/ca/ca_certificate.pem
  etcd_FactoryControlApp_cert:
    file: Certificates/FactoryControlApp/FactoryControlApp_client_certificate.pem
  etcd_FactoryControlApp_key:
    file: Certificates/FactoryControlApp/FactoryControlApp_client_key.pem
  etcd_ImageStore_cert:
    file: Certificates/ImageStore/ImageStore_client_certificate.pem
  etcd_ImageStore_key:
    file: Certificates/root/ImageStore_client_key.pem
  etcd_InfluxDBConnector_cert:
    file: Certificates/InfluxDBConnector/InfluxDBConnector_client_certificate.pem
  etcd_InfluxDBConnector_key:
    file: Certificates/InfluxDBConnector/InfluxDBConnector_client_key.pem
  etcd_Kapacitor_cert:
    file: Certificates/Kapacitor/Kapacitor_client_certificate.pem
  etcd_Kapacitor_key:
    file: Certificates/Kapacitor/Kapacitor_client_key.pem
  etcd_OpcuaExport_cert:
    file: Certificates/OpcuaExport/OpcuaExport_client_certificate.pem
  etcd_OpcuaExport_key:
    file: Certificates/OpcuaExport/OpcuaExport_client_key.pem
  etcd_VideoAnalytics_cert:
    file: Certificates/VideoAnalytics/VideoAnalytics_client_certificate.pem
  etcd_VideoAnalytics_key:
    file: Certificates/VideoAnalytics/VideoAnalytics_client_key.pem
  etcd_VideoIngestion_cert:
    file: Certificates/VideoIngestion/VideoIngestion_client_certificate.pem
  etcd_VideoIngestion_key:
    file: Certificates/VideoIngestion/VideoIngestion_client_key.pem
  etcd_Visualizer_cert:
    file: Certificates/Visualizer/Visualizer_client_certificate.pem
  etcd_root_key:
    file: Certificates/Visualizer/Visualizer_client_key.pem
  etcd_root_cert:
    file: Certificates/root/root_client_certificate.pem
  etcd_root_key:
    file: Certificates/root/root_client_key.pem
