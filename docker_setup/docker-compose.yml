version: '3'

services:

  #---- Start: IEI Dependency Services----
  # Define a log_rotate service
  ia_log_rotate:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.logrotate
      args:
        LOG_ROTATE_VERSION: ${LOG_ROTATE_VERSION}
        IEI_UID: ${IEI_UID}
    container_name: ia_log_rotate
    hostname: ia_log_rotate
    image: ia/logrotate:${IEI_VERSION}
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      LOGS_DIRECTORIES: ${IEI_INSTALL_PATH}/logs
    
      # Logrotate can rotate logfile according to the following intervals:
      # hourly
      # daily
      # weekly
      # monthly
      # yearly
      # For more details, refer the following link
      # https://hub.docker.com/r/blacklabelops/logrotate/
      LOGROTATE_INTERVAL: "daily"
      LOGROTATE_COPIES: ${LOGROTATE_COPIES}
      LOGROTATE_DATEFORMAT: "%Y%m%d_%H:%M:%S"
      TZ: ${HOST_TIME_ZONE}
    volumes:
      - "${IEI_INSTALL_PATH}/logs:${IEI_INSTALL_PATH}/logs"
    healthcheck:
       test: ["CMD-SHELL", "exit", "0"]
       interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    

  #---- End: IEI Dependency Services----

  #----Start: IEI Base Images----
  # Define ia-gobase service
  ia-gobase:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.gobase
      args:
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
    image: ia/gobase:${IEI_VERSION}
    depends_on:
      - ia_log_rotate

  # Define ia-pybase service
  ia-pybase:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.pybase
      args:
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
    image: ia/pybase:${IEI_VERSION}
    depends_on:
      - ia_log_rotate

  # Define ia-gopybase service
  ia-gopybase:
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.gopybase
      args:
        IEI_VERSION: ${IEI_VERSION}
    image: ia/gopybase:${IEI_VERSION}
    depends_on:
      - ia_log_rotate
    
    
  #----End: IEI Base Images----

  #----Start: IEI Containers ----
  # Define DataAgent service - hosts vault daemon, influxdb daemon & DataAgent module
  ia_data_agent:
    links:
      - ia_log_rotate
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.da
      args:
        IEI_VERSION: ${IEI_VERSION}
        INFLUXDB_VERSION: ${INFLUXDB_VERSION}
        IEI_UID: ${IEI_UID}
    image: ia/data_agent:${IEI_VERSION}
    container_name: ia_data_agent
    hostname: ia_data_agent
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      NO_PROXY: ${NO_PROXY}
      no_proxy: ${NO_PROXY}
      SHARED_KEY: ${SHARED_KEY}
      SHARED_NONCE: ${SHARED_NONCE}
      IMAGESTORE_SERVER: ${IMAGESTORE_SERVER_HOST}
      INFLUX_SERVER: ${INFLUX_SERVER_HOST}
      GRPC_INTERNAL_PORT: ${GRPC_INTERNAL_PORT}
      GRPC_EXTERNAL_PORT: ${GRPC_EXTERNAL_PORT}
      INFLUXDB_PORT: ${INFLUXDB_PORT}
      VAULT_PORT: ${VAULT_PORT}
      TPM_ENABLE: ${TPM_ENABLE}
      LD_LIBRARY_PATH: /usr/local/lib
      INFLUXDB_HTTP_AUTH_ENABLED: ${INFLUX_AUTH_VALUE}
      GO_LOG_LEVEL: ${GO_LOG_LEVEL}
      GO_VERBOSE: ${GO_VERBOSE}
    volumes:
      - "${IEI_INSTALL_PATH}/data/influxdata:/influxdata"
      - "${IEI_INSTALL_PATH}/grpc_int_ssl_secrets:/etc/ssl/grpc_int_ssl_secrets"
      - "${IEI_INSTALL_PATH}/config/influxdb.conf:/etc/influxdb/influxdb.conf"
      - "${IEI_INSTALL_PATH}/secret_store:/vault/file"
      - "${IEI_INSTALL_PATH}/tpm_secret:/IEI/tpm_secret"
      - "${IEI_INSTALL_PATH}/logs/DataAgent:/IEI/go/src/IEdgeInsights/log/DataAgent"
    command: ["${GO_LOG_LEVEL}", "${GO_VERBOSE}"]
    ports:
      - "127.0.0.1:${GRPC_INTERNAL_PORT}:${GRPC_INTERNAL_PORT}"
      - "${HOST_IP}:${OPCUA_PORT}:${OPCUA_PORT}"
      - "127.0.0.1:${INFLUXDB_PORT}:${INFLUXDB_PORT}"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define telegraf service
  ia_telegraf:
    links:
      - ia_data_agent:ia_influxdb
    external_links:
      - ia_mqtt
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.telegraf
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
    container_name: ia_telegraf
    hostname: ia_telegraf
    image: ia/telegraf:${IEI_VERSION}
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      SHARED_KEY: ${SHARED_KEY}
      SHARED_NONCE: ${SHARED_NONCE}
      INFLUX_SERVER: ${INFLUX_SERVER_HOST}
      NO_PROXY: ${NO_PROXY}
      no_proxy: ${NO_PROXY}
      GRPC_SERVER: ${GRPC_SERVER_HOST}
      HOST_IP: ${HOST_IP}
    volumes:
      - "${IEI_INSTALL_PATH}/grpc_int_ssl_secrets:/etc/ssl/grpc_int_ssl_secrets"
      - "${IEI_INSTALL_PATH}/logs/telegraf_logs:/IEI/telegraf_logs"
      - "${IEI_INSTALL_PATH}/config/telegraf.conf:/IEI/go/src/IEdgeInsights/Telegraf/Telegraf.conf"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
       test: ["CMD-SHELL", "exit", "0"]
       interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    

  # Define Imagestore service which hosts redis and minio dbs
  ia_imagestore:
    links:
       - ia_data_agent
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.imagestore
      args:
        IEI_VERSION: ${IEI_VERSION}
        REDIS_VERSION: ${REDIS_VERSION}
        MINIO_VERSION: ${MINIO_VERSION}
        IEI_UID: ${IEI_UID}
    container_name: ia_imagestore
    hostname: ia_imagestore
    image: ia/imagestore:${IEI_VERSION}
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      NO_PROXY: ${NO_PROXY}
      no_proxy: ${NO_PROXY}
      SHARED_KEY: ${SHARED_KEY}
      SHARED_NONCE: ${SHARED_NONCE}
      REDIS_PORT: ${REDIS_PORT}
      MINIO_PORT: ${MINIO_PORT}
      GRPC_SERVER: ${GRPC_SERVER_HOST}
      GO_LOG_LEVEL: ${GO_LOG_LEVEL}
      GO_VERBOSE: ${GO_VERBOSE}
    command: ["-stderrthreshold", "${GO_LOG_LEVEL}", "-v", "${GO_VERBOSE}"]
    ports:
      - "${HOST_IP}:${IMAGESTORE_PORT}:${IMAGESTORE_PORT}"
    volumes:
      - "${IEI_INSTALL_PATH}/data:/data"
      - "${IEI_INSTALL_PATH}/grpc_int_ssl_secrets:/etc/ssl/grpc_int_ssl_secrets"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    
  # Define DataAnalytics service
  ia_data_analytics:
    links:
      - ia_data_agent:ia_influxdb
      - ia_imagestore
    external_links:
       -  ia_mqtt
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.classifier
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
    image: ia/data_analytics:${IEI_VERSION}
    container_name: ia_data_analytics
    hostname: ia_data_analytics
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      SHARED_KEY: ${SHARED_KEY}
      SHARED_NONCE: ${SHARED_NONCE}
      KAPACITOR_URL: https://ia_data_analytics:${KAPACITOR_PORT}/
      KAPACITOR_UNSAFE_SSL: "false"
      KAPACITOR_INFLUXDB_0_URLS_0: https://ia_influxdb:${INFLUXDB_PORT}/
      INFLUX_SERVER: ${INFLUX_SERVER_HOST}
      GRPC_SERVER: ${GRPC_SERVER_HOST}
      IMAGESTORE_SERVER: ${IMAGESTORE_SERVER_HOST}
      NO_PROXY: ${NO_PROXY}
      no_proxy: ${NO_PROXY}
      KAPACITOR_PORT: ${KAPACITOR_PORT}
      INFLUXDB_PORT: ${INFLUXDB_PORT}
      PY_LOG_LEVEL: ${PY_LOG_LEVEL}
    volumes:
      - "${IEI_INSTALL_PATH}/grpc_int_ssl_secrets:/etc/ssl/grpc_int_ssl_secrets"
      - "${IEI_INSTALL_PATH}/config/kapacitor.conf:/etc/kapacitor/kapacitor.conf"
      - "${IEI_INSTALL_PATH}/config/factory.json:/IEI/factory.json"
      - "${IEI_INSTALL_PATH}/config/factory_prod.json:/IEI/factory_prod.json"
      - "${IEI_INSTALL_PATH}/config/algo_config:/IEI/algos/algo_config"
      - "${IEI_INSTALL_PATH}/logs/classifier_logs:/IEI/classifier_logs"
    expose:
      - ${KAPACITOR_PORT}
    command: ["${CONFIG_FILE}", "${PY_LOG_LEVEL}"]
    devices:
      - "/dev/dri"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges

  # Define FactoryControlApp service
  ia_factoryctrl_app:
    links:
       - ia_data_analytics
       - ia_data_agent:ia_influxdb
    external_links:
       - ia_mqtt
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.factoryctrlapp
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
    image: ia/factoryctrl_app:${IEI_VERSION}
    container_name: ia_factoryctrl_app
    hostname: ia_factoryctrl_app
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      SHARED_KEY: ${SHARED_KEY}
      SHARED_NONCE: ${SHARED_NONCE}
      INFLUX_SERVER: ${INFLUX_SERVER_HOST}
      GRPC_SERVER: ${GRPC_SERVER_HOST}
      NO_PROXY: ${NO_PROXY},${HOST_IP}
      no_proxy: ${NO_PROXY},${HOST_IP}
    volumes:
      - "${IEI_INSTALL_PATH}/grpc_int_ssl_secrets:/etc/ssl/grpc_int_ssl_secrets"
      - "${IEI_INSTALL_PATH}/logs/factoryctrl_app_logs:/IEI/factoryctrl_app_logs"
    command: ["--log", "${PY_LOG_LEVEL}"]
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges
    
  # Define VideoIngestion service
  ia_video_ingestion:
    depends_on:
      - ia_imagestore
      - ia_data_analytics
    build:
      context: ../
      dockerfile: $PWD/dockerfiles/Dockerfile.vi
      args:
        IEI_VERSION: ${IEI_VERSION}
        IEI_UID: ${IEI_UID}
    image: ia/video_ingestion:${IEI_VERSION}
    container_name: ia_video_ingestion
    hostname: ia_video_ingestion
    network_mode: host
    restart: on-failure:${FAILURE_ATTEMPTS}
    environment:
      SHARED_KEY: ${SHARED_KEY}
      SHARED_NONCE: ${SHARED_NONCE}
      INFLUX_SERVER: "localhost"
      IMAGESTORE_SERVER: ${HOST_IP}
      GRPC_SERVER: "localhost"
      NO_PROXY: ${NO_PROXY},${HOST_IP},${RTSP_CAMERA_IP}
      no_proxy: ${NO_PROXY},${HOST_IP},${RTSP_CAMERA_IP}
      DEBIAN_FRONTEND: noninteractive
      MFX_HOME: "/opt/intel/mediasdk/"
      PKG_CONFIG_PATH: "/opt/intel/mediasdk"
      LIBVA_DRIVERS_PATH: "/usr/lib/x86_64-linux-gnu/dri/"
      LIBVA_DRIVER_NAME: "iHD"
      LD_RUN_PATH: "/usr/lib"
      LD_LIBRARY_PATH: "/opt/intel/mediasdk/lib/:/opt/intel/mediasdk/share/mfx/samples"
      TERM: "xterm"
      PY_LOG_LEVEL: ${PY_LOG_LEVEL}
    volumes:
      - "${IEI_INSTALL_PATH}/grpc_int_ssl_secrets:/etc/ssl/grpc_int_ssl_secrets"
      - "${IEI_INSTALL_PATH}/test_videos:/IEI/test_videos"
      - "${IEI_INSTALL_PATH}/config/factory.json:/IEI/factory.json"
      - "${IEI_INSTALL_PATH}/config/factory_prod.json:/IEI/factory_prod.json"
      - "${IEI_INSTALL_PATH}/config/algo_config:/IEI/algos/algo_config"
      - "${IEI_INSTALL_PATH}/logs/video_ingestion_logs:/IEI/video_ingestion_logs"
    command: ["--config", "${CONFIG_FILE}", "--log", "${PY_LOG_LEVEL}"]
    devices:
      - "/dev/dri"
    logging:
      driver: ${LOGGING_DRIVER}
      options:
        max-size: ${LOGROTATE_SIZE_FOR_CONT}
        max-file: ${LOGROTATE_COPIES}
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: ${HEALTHCHECK_DURATION}
    user: ${IEI_UID}
    security_opt:
      - seccomp:$PWD/config/seccomp_default.json
      - no-new-privileges


networks:
  default:
    external:
      name: ${COMPOSE_PROJECT_NAME}

  #----End: IEI Containers ----
