version: '3.6'

services:

  ##----Start: EIS Base Images -- This Base images must be included for building any EIS servcies ----
  ## Define ia_eisbase service
  ia_common:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_common:${EIS_VERSION}

  ia_eisbase:
    depends_on:
      - ia_common
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.eisbase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_eisbase:${EIS_VERSION}

  ia_openvino_base:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../common/openvino
      dockerfile: $PWD/../common/openvino/Dockerfile.openvino
      args:
          EIS_VERSION: ${EIS_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_openvino_base:${EIS_VERSION}


  ##----End: EIS Base Images---- -- This Base images must be included for building any EIS servcies ----

  ## Define ETCD UI service - must be included to view ETCD data over web UI
  ia_etcd_ui:
    build:
      context: $PWD/../EtcdUI
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_KEEPER_VERSION: ${ETCD_KEEPER_VERSION}
        EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_etcd_ui:${EIS_VERSION}
    read_only: true
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "EtcdUi"
      DEV_MODE: ${DEV_MODE}
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_root_cert
      - etcd_root_key

  ##----Start: EIS Containers ----
  ## Define VideoIngestion1 service
  ia_video_ingestion1:
    depends_on:
      - ia_openvino_base
    build:
      context: ../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "OFF"
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion1
    hostname: ia_video_ingestion1
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion1"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics1,Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera1_stream"
      camera1_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"  
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion1_cert
      - etcd_VideoIngestion1_key

  ## Define VideoAnalytics1 service
  ia_video_analytics1:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoAnalytics
      dockerfile: $PWD/../VideoAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        CMAKE_BUILD_TYPE: "Release"
    image: ${DOCKER_REGISTRY}ia_video_analytics:${EIS_VERSION}
    container_name: ia_video_analytics1
    hostname: ia_video_analytics1
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoAnalytics1"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      Clients : "Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      SubTopics: "VideoIngestion1/camera1_stream"
      camera1_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PubTopics: "camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
    privileged: true
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    devices:
      - "/dev/dri"
      - "/dev/ion:/dev/ion"
    secrets:
      - ca_etcd
      - etcd_VideoAnalytics1_cert
      - etcd_VideoAnalytics1_key

  ## Define VideoIngestion2 service
  ia_video_ingestion2:
    depends_on:
      - ia_openvino_base
    build:
      context: ../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "OFF"
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion2
    hostname: ia_video_ingestion2
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion2"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      
      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics2,Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera2_stream"
      camera2_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"  
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion2_cert
      - etcd_VideoIngestion2_key
  
  ## Define VideoAnalytics2 service
  ia_video_analytics2:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoAnalytics
      dockerfile: $PWD/../VideoAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        CMAKE_BUILD_TYPE: "Release"
    image: ${DOCKER_REGISTRY}ia_video_analytics:${EIS_VERSION}
    container_name: ia_video_analytics2
    hostname: ia_video_analytics2
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoAnalytics2"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      Clients : "Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      SubTopics: "VideoIngestion2/camera2_stream"
      camera2_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PubTopics: "camera2_stream_results"
      camera2_stream_results_cfg: "zmq_tcp,127.0.0.1:65014"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
    privileged: true
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    devices:
      - "/dev/dri"
      - "/dev/ion:/dev/ion"
    secrets:
      - ca_etcd
      - etcd_VideoAnalytics2_cert
      - etcd_VideoAnalytics2_key

  ## Define VideoIngestion3 service        
  ia_video_ingestion3:
    depends_on:
      - ia_openvino_base
    build:
      context: ../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "OFF"
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion3
    hostname: ia_video_ingestion3
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion3"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics3,Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera3_stream"
      camera3_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"  
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion3_cert
      - etcd_VideoIngestion3_key

  ## Define VideoAnalytics3 service    
  ia_video_analytics3:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoAnalytics
      dockerfile: $PWD/../VideoAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        CMAKE_BUILD_TYPE: "Release"
    image: ${DOCKER_REGISTRY}ia_video_analytics:${EIS_VERSION}
    container_name: ia_video_analytics3
    hostname: ia_video_analytics3
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoAnalytics3"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      Clients : "Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      SubTopics: "VideoIngestion3/camera3_stream"
      camera3_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PubTopics: "camera3_stream_results"
      camera3_stream_results_cfg: "zmq_tcp,127.0.0.1:65015"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
    privileged: true
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    devices:
      - "/dev/dri"
      - "/dev/ion:/dev/ion"
    secrets:
      - ca_etcd
      - etcd_VideoAnalytics3_cert
      - etcd_VideoAnalytics3_key

  ## Define VideoIngestion4 service
  ia_video_ingestion4:
    depends_on:
      - ia_openvino_base
    build:
      context: ../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "OFF"
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion4
    hostname: ia_video_ingestion4
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion4"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics4,Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera4_stream"
      camera4_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"  
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion4_cert
      - etcd_VideoIngestion4_key

  ## Define VideoAnalytics4 service      
  ia_video_analytics4:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoAnalytics
      dockerfile: $PWD/../VideoAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        CMAKE_BUILD_TYPE: "Release"
    image: ${DOCKER_REGISTRY}ia_video_analytics:${EIS_VERSION}
    container_name: ia_video_analytics4
    hostname: ia_video_analytics4
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoAnalytics4"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      Clients : "Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      SubTopics: "VideoIngestion4/camera4_stream"
      camera4_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PubTopics: "camera4_stream_results"
      camera4_stream_results_cfg: "zmq_tcp,127.0.0.1:65016"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
    privileged: true
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    devices:
      - "/dev/dri"
      - "/dev/ion:/dev/ion"
    secrets:
      - ca_etcd
      - etcd_VideoAnalytics4_cert
      - etcd_VideoAnalytics4_key
  
  ## Define VideoIngestion5 service
  ia_video_ingestion5:
    depends_on:
      - ia_openvino_base
    build:
      context: ../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "OFF"
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion5
    hostname: ia_video_ingestion5
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion5"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics5,Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera5_stream"
      camera5_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"  
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion5_cert
      - etcd_VideoIngestion5_key

## Define VideoAnalytics5 service    
  ia_video_analytics5:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoAnalytics
      dockerfile: $PWD/../VideoAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        CMAKE_BUILD_TYPE: "Release"
    image: ${DOCKER_REGISTRY}ia_video_analytics:${EIS_VERSION}
    container_name: ia_video_analytics5
    hostname: ia_video_analytics5
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoAnalytics5"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      Clients : "Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      SubTopics: "VideoIngestion5/camera5_stream"
      camera5_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PubTopics: "camera5_stream_results"
      camera5_stream_results_cfg: "zmq_tcp,127.0.0.1:65017"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
    privileged: true
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    devices:
      - "/dev/dri"
      - "/dev/ion:/dev/ion"
    secrets:
      - ca_etcd
      - etcd_VideoAnalytics5_cert
      - etcd_VideoAnalytics5_key
  
  ## Define VideoIngestion6 service
  ia_video_ingestion6:
    depends_on:
      - ia_openvino_base
    build:
      context: ../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        WITH_PROFILE: "OFF"
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion6
    hostname: ia_video_ingestion6
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion6"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${RTSP_CAMERA_IP},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      
      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics6,Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera6_stream"
      camera6_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion6_cert
      - etcd_VideoIngestion6_key
        
  ## Define VideoAnalytics6 service      
  ia_video_analytics6:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoAnalytics
      dockerfile: $PWD/../VideoAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        CMAKE_BUILD_TYPE: "Release"
    image: ${DOCKER_REGISTRY}ia_video_analytics:${EIS_VERSION}
    container_name: ia_video_analytics6
    hostname: ia_video_analytics6
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoAnalytics6"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      Clients : "Visualizer"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      SubTopics: "VideoIngestion6/camera6_stream"
      camera6_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PubTopics: "camera6_stream_results"
      camera6_stream_results_cfg: "zmq_tcp,127.0.0.1:65018"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
    privileged: true
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    devices:
      - "/dev/dri"
      - "/dev/ion:/dev/ion"
    secrets:
      - ca_etcd
      - etcd_VideoAnalytics6_cert
      - etcd_VideoAnalytics6_key
        
  ## Define Visualizer service
  ia_visualizer:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../Visualizer
      dockerfile: $PWD/../Visualizer/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_visualizer:${EIS_VERSION}
    container_name: ia_visualizer
    hostname: ia_visualizer
    network_mode: host
    ipc: host
    restart: unless-stopped
    environment:
      AppName: "Visualizer"
      DISPLAY: ${DISPLAY}
      IMAGE_DIR: ${EIS_INSTALL_PATH}/saved_images
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}

      # MessageBus Endpoint Configuration
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"
      # For default video streaming usecase alone
      SubTopics: "VideoAnalytics1/camera1_stream_results,VideoAnalytics2/camera2_stream_results,VideoAnalytics3/camera3_stream_results,VideoAnalytics4/camera4_stream_results,VideoAnalytics5/camera5_stream_results,VideoAnalytics6/camera6_stream_results"
      camera1_stream_results_cfg : "zmq_tcp,127.0.0.1:65013"
      camera2_stream_results_cfg : "zmq_tcp,127.0.0.1:65014"
      camera3_stream_results_cfg : "zmq_tcp,127.0.0.1:65015"
      camera4_stream_results_cfg : "zmq_tcp,127.0.0.1:65016"
      camera5_stream_results_cfg : "zmq_tcp,127.0.0.1:65017"
      camera6_stream_results_cfg : "zmq_tcp,127.0.0.1:65018"  
    privileged: true
    volumes:
      - "${EIS_INSTALL_PATH}/saved_images:${EIS_INSTALL_PATH}/saved_images"
      - "/tmp/.X11-unix:/tmp/.X11-unix"
      - "vol_eis_socket:${SOCKET_DIR}"
    secrets:
      - ca_etcd
      - etcd_Visualizer_cert
      - etcd_Visualizer_key

volumes:
  vol_influxdb_data:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/data/influxdata
  vol_imagestore_data:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/data
  vol_eis_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/sockets

secrets:
  etcd_VideoIngestion1_cert:
    file: provision/Certificates/VideoIngestion1/VideoIngestion1_client_certificate.pem
  etcd_VideoIngestion1_key:
    file: provision/Certificates/VideoIngestion1/VideoIngestion1_client_key.pem
  etcd_VideoAnalytics1_key:
    file: provision/Certificates/VideoAnalytics1/VideoAnalytics1_client_key.pem
  etcd_VideoAnalytics1_cert:
    file: provision/Certificates/VideoAnalytics1/VideoAnalytics1_client_certificate.pem

  etcd_VideoIngestion2_cert:
    file: provision/Certificates/VideoIngestion2/VideoIngestion2_client_certificate.pem
  etcd_VideoIngestion2_key:
    file: provision/Certificates/VideoIngestion2/VideoIngestion2_client_key.pem 
  etcd_VideoAnalytics2_key:
    file: provision/Certificates/VideoAnalytics2/VideoAnalytics2_client_key.pem
  etcd_VideoAnalytics2_cert:
    file: provision/Certificates/VideoAnalytics2/VideoAnalytics2_client_certificate.pem

  etcd_VideoIngestion3_cert:
    file: provision/Certificates/VideoIngestion3/VideoIngestion3_client_certificate.pem
  etcd_VideoIngestion3_key:
    file: provision/Certificates/VideoIngestion3/VideoIngestion3_client_key.pem
  etcd_VideoAnalytics3_key:
    file: provision/Certificates/VideoAnalytics3/VideoAnalytics3_client_key.pem
  etcd_VideoAnalytics3_cert:
    file: provision/Certificates/VideoAnalytics3/VideoAnalytics3_client_certificate.pem

  etcd_VideoIngestion4_cert:
    file: provision/Certificates/VideoIngestion4/VideoIngestion4_client_certificate.pem
  etcd_VideoIngestion4_key:
    file: provision/Certificates/VideoIngestion4/VideoIngestion4_client_key.pem
  etcd_VideoAnalytics4_key:
    file: provision/Certificates/VideoAnalytics4/VideoAnalytics4_client_key.pem
  etcd_VideoAnalytics4_cert:
    file: provision/Certificates/VideoAnalytics4/VideoAnalytics4_client_certificate.pem

  etcd_VideoIngestion5_cert:
    file: provision/Certificates/VideoIngestion5/VideoIngestion5_client_certificate.pem
  etcd_VideoIngestion5_key:
    file: provision/Certificates/VideoIngestion5/VideoIngestion5_client_key.pem
  etcd_VideoAnalytics5_key:
    file: provision/Certificates/VideoAnalytics5/VideoAnalytics5_client_key.pem
  etcd_VideoAnalytics5_cert:
    file: provision/Certificates/VideoAnalytics5/VideoAnalytics5_client_certificate.pem

  etcd_VideoIngestion6_cert:
    file: provision/Certificates/VideoIngestion6/VideoIngestion6_client_certificate.pem
  etcd_VideoIngestion6_key:
    file: provision/Certificates/VideoIngestion6/VideoIngestion6_client_key.pem    
  etcd_VideoAnalytics6_key:
    file: provision/Certificates/VideoAnalytics6/VideoAnalytics6_client_key.pem
  etcd_VideoAnalytics6_cert:
    file: provision/Certificates/VideoAnalytics6/VideoAnalytics6_client_certificate.pem    
  
  etcd_Visualizer_cert:
    file: provision/Certificates/Visualizer/Visualizer_client_certificate.pem
  etcd_Visualizer_key:
    file: provision/Certificates/Visualizer/Visualizer_client_key.pem
  etcd_root_cert:
    file: provision/Certificates/root/root_client_certificate.pem
  etcd_root_key:
    file: provision/Certificates/root/root_client_key.pem
  ca_etcd:
    file: provision/Certificates/ca/ca_certificate.pem

