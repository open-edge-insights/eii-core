version: '3.6'

services:

  ##----Start: EIS Base Images -- This Base images must be included for building any EIS servcies ----
  ## Define ia_eisbase service
  ia_eisbase:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.eisbase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_eisbase:${EIS_VERSION}

  ## Define ia_common service
  ia_common:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
          EIS_VERSION: ${EIS_VERSION}
          # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
          CMAKE_BUILD_TYPE: "Release"
    read_only: true
    image: ${DOCKER_REGISTRY}ia_common:${EIS_VERSION}

  ##----End: EIS Base Images---- -- This Base images must be included for building any EIS servcies ----

  ## Define ETCD UI service - must be included to view ETCD data over web UI
  ia_etcd_ui:
    build:
      context: $PWD/../EtcdUI
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_KEEPER_VERSION: ${ETCD_KEEPER_VERSION}
        EIS_VERSION: ${EIS_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_etcd_ui:${EIS_VERSION}
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "EtcdUi"
      DEV_MODE: ${DEV_MODE}
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_root_cert
      - etcd_root_key

  # Define Visualizer service
  ia_visualizer:
    depends_on:
      - ia_common
    build:
      context: $PWD/../Visualizer
      dockerfile: $PWD/../Visualizer/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_visualizer:${EIS_VERSION}
    container_name: ia_visualizer
    hostname: ia_visualizer
    network_mode: host
    ipc: host
    restart: unless-stopped
    environment:
      AppName: "Visualizer"
      DISPLAY: ${DISPLAY}
      IMAGE_DIR: ${EIS_INSTALL_PATH}/saved_images
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy}

      # MessageBus Endpoint Configuration
      CertType: "zmq"
      
      # Use IPC mode (zmq_ipc) when VideoIngestion, VideoAnalytics and Visualizer
      # based containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>

      # For default video streaming usecase alone
      #SubTopics: "VideoAnalytics/camera1_stream_results"
      #camera1_stream_results_cfg : "zmq_tcp,127.0.0.1:65013"

      # Uncomment the below two lines for running Time Series use case only
      SubTopics: "InfluxDBConnector/point_classifier_results"
      point_classifier_results_cfg: "zmq_tcp,127.0.0.1:65016"

      # Uncomment the below three lines for running Video and Time Series together
      # SubTopics: "VideoAnalytics/camera1_stream_results,InfluxDBConnector/point_classifier_results"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
      # point_classifier_results_cfg: "zmq_tcp,127.0.0.1:65016"

      # Uncomment the below two lines for running DiscoveryCreek usecase alone
      # SubTopics: "DiscoveryCreek/dc_point_data_results"
      # dc_point_data_results_cfg: "zmq_tcp,127.0.0.1:65014"
    privileged: true
    volumes:
      - "${EIS_INSTALL_PATH}/saved_images:${EIS_INSTALL_PATH}/saved_images"
      - "/tmp/.X11-unix:/tmp/.X11-unix"
      - "vol_eis_socket:${SOCKET_DIR}"
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_Visualizer_cert
      - etcd_Visualizer_key

  # Define influxdb connector service
  ia_influxdbconnector:
    depends_on:
      - ia_common
    build:
      context: $PWD/../InfluxDBConnector
      dockerfile: $PWD/../InfluxDBConnector/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        INFLUXDB_VERSION: ${INFLUXDB_VERSION}
    image: ${DOCKER_REGISTRY}ia_influxdbconnector:${EIS_VERSION}
    container_name: ia_influxdbconnector
    hostname: ia_influxdbconnector
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "InfluxDBConnector"
      CertType: "zmq,pem"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy}

      # MessageBus Endpoint Configuration
      Clients: "Visualizer"
      Server: "zmq_tcp,127.0.0.1:8675"
      INFLUXDB_TLS_CIPHERS: ${TLS_CIPHERS}
      SOCKET_DIR: ${SOCKET_DIR}
      # Use IPC mode (zmq_ipc) when VideoIngestion, VideoAnalytics and Visualizer
      # based containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      #SubTopics: "VideoAnalytics/camera1_stream_results,DiscoveryCreek/dc_point_data_results"
      #dc_point_data_results_cfg: "zmq_tcp,127.0.0.1:65014"
      #camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      #PubTopics: "point_data,point_classifier_results"
      PubTopics: "point_classifier_results"
      #point_data_cfg: "zmq_tcp,127.0.0.1:65015"
      # point_data_cfg: "zmq_ipc,${SOCKET_DIR}/"
      point_classifier_results_cfg: "zmq_tcp,127.0.0.1:65016"
    volumes:
      - "vol_influxdb_data:/influxdata"
      - "./config/influxdb.conf:/etc/influxdb/influxdb.conf"
      - "./config/influxdb_devmode.conf:/etc/influxdb/influxdb_devmode.conf"
      - "vol_eis_socket:${SOCKET_DIR}"
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_InfluxDBConnector_cert
      - etcd_InfluxDBConnector_key


  # Define telegraf service
  ia_telegraf:
    depends_on:
      - ia_common
    build:
      context: $PWD/../Telegraf
      dockerfile: $PWD/../Telegraf/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
    container_name: ia_telegraf
    hostname: ia_telegraf
    network_mode: host
    image: ${DOCKER_REGISTRY}ia_telegraf:${EIS_VERSION}
    restart: unless-stopped
    environment:
      AppName: "Telegraf"
      InfluxDbAppName: "InfluxDBConnector"
      CertType: ""
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}
    volumes:
      - "./config/telegraf.conf:/etc/Telegraf/telegraf.conf"
      - "./config/telegraf_devmode.conf:/etc/Telegraf/telegraf_devmode.conf"
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_InfluxDBConnector_cert
      - etcd_InfluxDBConnector_key

  # Define DataAnalytics service
  ia_data_analytics:
    depends_on:
      - ia_common
    build:
      context: $PWD/../TimeSeriesAnalytics/
      dockerfile: $PWD/../TimeSeriesAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
    image: ${DOCKER_REGISTRY}ia_data_analytics:${EIS_VERSION}
    container_name: ia_data_analytics
    hostname: ia_data_analytics
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "Kapacitor"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}

      CertType: "pem"
    volumes:
      - "./config/kapacitor.conf:/etc/kapacitor/kapacitor.conf"
      - "./config/kapacitor_devmode.conf:/etc/kapacitor/kapacitor_devmode.conf"
    devices:
      - "/dev/dri"
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_Kapacitor_cert
      - etcd_Kapacitor_key

volumes:
  vol_influxdb_data:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/data/influxdata
  vol_eis_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/sockets

secrets:
  ca_etcd:
    file: provision/Certificates/ca/ca_certificate.pem
  etcd_InfluxDBConnector_cert:
    file: provision/Certificates/InfluxDBConnector/InfluxDBConnector_client_certificate.pem
  etcd_InfluxDBConnector_key:
    file: provision/Certificates/InfluxDBConnector/InfluxDBConnector_client_key.pem
  etcd_Kapacitor_cert:
    file: provision/Certificates/Kapacitor/Kapacitor_client_certificate.pem
  etcd_Kapacitor_key:
    file: provision/Certificates/Kapacitor/Kapacitor_client_key.pem
  etcd_Visualizer_cert:
    file: provision/Certificates/Visualizer/Visualizer_client_certificate.pem
  etcd_Visualizer_key:
    file: provision/Certificates/Visualizer/Visualizer_client_key.pem
  etcd_root_cert:
    file: provision/Certificates/root/root_client_certificate.pem
  etcd_root_key:
    file: provision/Certificates/root/root_client_key.pem

