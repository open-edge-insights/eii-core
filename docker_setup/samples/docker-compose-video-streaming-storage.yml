version: '3.6'

services:

  ##----Start: EIS Base Images -- This Base images must be included for building any EIS servcies ----
  ## Define ia_eisbase service
  ia_eisbase:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.eisbase
      args:
          UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
          EIS_VERSION: ${EIS_VERSION}
    image: ${DOCKER_REGISTRY}ia_eisbase:${EIS_VERSION}

  ## Define ia_common service
  ia_common:
    depends_on:
      - ia_eisbase
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
          EIS_VERSION: ${EIS_VERSION}
          # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
          CMAKE_BUILD_TYPE: "Release"
    read_only: true
    image: ${DOCKER_REGISTRY}ia_common:${EIS_VERSION}

  ## Define ia_openvino_base service
  ia_openvino_base:
    depends_on:
      - ia_common
    build:
      context: $PWD/../common/openvino
      dockerfile: $PWD/../common/openvino/Dockerfile.openvino
      args:
          EIS_VERSION: ${EIS_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_openvino_base:${EIS_VERSION}

  ##----End: EIS Base Images---- -- This Base images must be included for building any EIS servcies ----

  ## Define ETCD UI service - must be included to view ETCD data over web UI
  ia_etcd_ui:
    build:
      context: $PWD/../EtcdUI
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_KEEPER_VERSION: ${ETCD_KEEPER_VERSION}
        EIS_VERSION: ${EIS_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_etcd_ui:${EIS_VERSION}
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "EtcdUi"
      DEV_MODE: ${DEV_MODE}
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_root_cert
      - etcd_root_key

  ##----Start: EIS Containers ----
  ## Define VideoIngestion service
  ia_video_ingestion:
    depends_on:
      - ia_openvino_base
    build:
      context: ../VideoIngestion
      dockerfile: $PWD/../VideoIngestion/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
    read_only: true
    image: ${DOCKER_REGISTRY}ia_video_ingestion:${EIS_VERSION}
    container_name: ia_video_ingestion
    hostname: ia_video_ingestion
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoIngestion"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy},${RTSP_CAMERA_IP}

      # MessageBus Endpoint Configuration
      # Setting Visualizer as a subscriber here for FpsCalculator
      Clients: "VideoAnalytics,Visualizer,RestDataExport"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolut_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      PubTopics: "camera1_stream"
      camera1_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
    volumes:
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"  
    privileged: true
    devices:
      - "/dev/dri"
      - "/dev/:/dev/"
    secrets:
      - ca_etcd
      - etcd_VideoIngestion_cert
      - etcd_VideoIngestion_key

  ## Define VideoAnalytics service
  ia_video_analytics:
    depends_on:
      - ia_openvino_base
    build:
      context: $PWD/../VideoAnalytics
      dockerfile: $PWD/../VideoAnalytics/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
    image: ${DOCKER_REGISTRY}ia_video_analytics:${EIS_VERSION}
    container_name: ia_video_analytics
    hostname: ia_video_analytics
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "VideoAnalytics"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy}

      # MessageBus Endpoint Configuration
      Clients : "Visualizer,FactoryControlApp,OpcuaExport,ImageStore,InfluxDBConnector,RestDataExport"
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion and VideoAnalytics based
      # containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      SubTopics: "VideoIngestion/camera1_stream"
      camera1_stream_cfg: "zmq_ipc,${SOCKET_DIR}/"
      PubTopics: "camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      # camera1_stream_results_cfg: "zmq_ipc,${SOCKET_DIR}/"
    privileged: true
    volumes:
      - "/dev:/dev"
      - "vol_eis_socket:${SOCKET_DIR}"
      - "/var/tmp:/var/tmp"
    devices:
      - "/dev/dri"
      - "/dev/ion:/dev/ion"
    secrets:
      - ca_etcd
      - etcd_VideoAnalytics_cert
      - etcd_VideoAnalytics_key

  ## Define Visualizer service
  ia_visualizer:
    depends_on:
      - ia_common
    build:
      context: $PWD/../Visualizer
      dockerfile: $PWD/../Visualizer/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        EIS_USER_NAME: ${EIS_USER_NAME}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_visualizer:${EIS_VERSION}
    container_name: ia_visualizer
    hostname: ia_visualizer
    network_mode: host
    ipc: host
    restart: unless-stopped
    command: ["pcb_demo_label.json"]
    environment:
      AppName: "Visualizer"
      DISPLAY: ":0"
      IMAGE_DIR: ${EIS_INSTALL_PATH}/saved_images
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy}

      # MessageBus Endpoint Configuration
      CertType: "zmq"
      ZMQ_RECV_HWM: "1000"

      # Use IPC mode (zmq_ipc) when VideoIngestion, VideoAnalytics and Visualizer
      # based containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>

      # For default video streaming usecase alone
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg : "zmq_tcp,127.0.0.1:65013"

    volumes:
      - "${EIS_INSTALL_PATH}/saved_images:${EIS_INSTALL_PATH}/saved_images"
      - "/tmp/.X11-unix:/tmp/.X11-unix"
      - "vol_eis_socket:${SOCKET_DIR}"
    secrets:
      - ca_etcd
      - etcd_Visualizer_cert
      - etcd_Visualizer_key

  ## Define influxdb connector service
  ia_influxdbconnector:
    depends_on:
      - ia_common
    build:
      context: $PWD/../InfluxDBConnector
      dockerfile: $PWD/../InfluxDBConnector/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        EIS_UID: ${EIS_UID}
        INFLUXDB_VERSION: ${INFLUXDB_VERSION}
    image: ${DOCKER_REGISTRY}ia_influxdbconnector:${EIS_VERSION}
    container_name: ia_influxdbconnector
    hostname: ia_influxdbconnector
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "InfluxDBConnector"
      CertType: "zmq,pem"
      DEV_MODE: ${DEV_MODE}
      PROFILING_MODE: ${PROFILING_MODE}
      no_proxy: ${no_proxy}

      # MessageBus Endpoint Configuration
      Clients: "Visualizer,DiscoveryCreek"
      Server: "zmq_tcp,127.0.0.1:8675"
      # Server: "zmq_ipc,${SOCKET_DIR}/"
      INFLUXDB_TLS_CIPHERS: ${TLS_CIPHERS}
      # Use IPC mode (zmq_ipc) when VideoIngestion, VideoAnalytics and Visualizer
      # based containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      SubTopics: "VideoAnalytics/camera1_stream_results,DiscoveryCreek/dc_point_data_results"
      dc_point_data_results_cfg: "zmq_tcp,127.0.0.1:65014"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
      PubTopics: "point_data,point_classifier_results"
      point_data_cfg: "zmq_tcp,127.0.0.1:65015"
      # point_data_cfg: "zmq_ipc,${SOCKET_DIR}/"
      point_classifier_results_cfg: "zmq_tcp,127.0.0.1:65016"
    volumes:
      - "vol_influxdb_data:/influxdata"
      - "./config/influxdb.conf:/etc/influxdb/influxdb.conf"
      - "./config/ignore_attributes.cfg:/EIS/go/src/IEdgeInsights/InfluxDBConnector/ignore_attributes.cfg"
      - "./config/influxdb_devmode.conf:/etc/influxdb/influxdb_devmode.conf"
      - "vol_eis_socket:${SOCKET_DIR}"
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_InfluxDBConnector_cert
      - etcd_InfluxDBConnector_key

  ## Define Imagestore service which hosts minio dbs
  ia_imagestore:
    depends_on:
      - ia_common
    build:
      context: $PWD/../ImageStore
      dockerfile: $PWD/../ImageStore/Dockerfile
      args:
        EIS_VERSION: ${EIS_VERSION}
        MINIO_VERSION: ${MINIO_VERSION}
        EIS_UID: ${EIS_UID}
    image: ${DOCKER_REGISTRY}ia_imagestore:${EIS_VERSION}
    container_name: ia_imagestore
    hostname: ia_imagestore
    network_mode: host
    restart: unless-stopped
    environment:
      AppName: "ImageStore"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${no_proxy}

      # MessageBus Endpoint Configuration
      # Uncomment the following line if using Discover history tool in PROD mode
      CertType: "zmq"
      Server: "zmq_tcp,127.0.0.1:5669"
      Clients: "Visualizer,RestDataExport"
      # Server: "zmq_ipc,${SOCKET_DIR}/"
      # Use IPC mode (zmq_ipc) when VideoIngestion, VideoAnalytics and Visualizer
      # based containers are running on the same host. If they are running on diff
      # host, please use TCP mode for communication.
      # Eg: Stream cfg for
      # IPC: zmq_ipc, <absolute_socket_directory_path>
      # TPC: zmq_tcp, <publisher_host>:<publisher_port>
      SubTopics: "VideoAnalytics/camera1_stream_results"
      camera1_stream_results_cfg: "zmq_tcp,127.0.0.1:65013"
    volumes:
      - "vol_imagestore_data:/data"
      - "vol_eis_socket:${SOCKET_DIR}"
    user: ${EIS_UID}
    secrets:
      - ca_etcd
      - etcd_ImageStore_cert
      - etcd_ImageStore_key

volumes:
  vol_influxdb_data:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/data/influxdata
  vol_imagestore_data:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/data
  vol_eis_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EIS_INSTALL_PATH}/sockets

secrets:
  ca_etcd:
    file: provision/Certificates/ca/ca_certificate.pem
  etcd_ImageStore_cert:
    file: provision/Certificates/ImageStore/ImageStore_client_certificate.pem
  etcd_ImageStore_key:
    file: provision/Certificates/ImageStore/ImageStore_client_key.pem
  etcd_InfluxDBConnector_cert:
    file: provision/Certificates/InfluxDBConnector/InfluxDBConnector_client_certificate.pem
  etcd_InfluxDBConnector_key:
    file: provision/Certificates/InfluxDBConnector/InfluxDBConnector_client_key.pem
  etcd_VideoAnalytics_cert:
    file: provision/Certificates/VideoAnalytics/VideoAnalytics_client_certificate.pem
  etcd_VideoAnalytics_key:
    file: provision/Certificates/VideoAnalytics/VideoAnalytics_client_key.pem
  etcd_VideoIngestion_cert:
    file: provision/Certificates/VideoIngestion/VideoIngestion_client_certificate.pem
  etcd_VideoIngestion_key:
    file: provision/Certificates/VideoIngestion/VideoIngestion_client_key.pem
  etcd_Visualizer_cert:
    file: provision/Certificates/Visualizer/Visualizer_client_certificate.pem
  etcd_Visualizer_key:
    file: provision/Certificates/Visualizer/Visualizer_client_key.pem
  etcd_root_cert:
    file: provision/Certificates/root/root_client_certificate.pem
  etcd_root_key:
    file: provision/Certificates/root/root_client_key.pem
