#!/bin/bash

# This scripts brings down the previous containers, builds the
# images and runs them in the dependency order using
# provision-compose.yml

source .env

if [ $DEV_MODE = "true" ]
then
	echo "Certificate & Credentials provisioning is not required while running in Developement Mode."
	exit 0
fi

if [ ! -n "$1" ]
then
  echo "USAGE: `basename $0` <PATH_TO_CERTIFICATES_DIRECTORY> NOTE: certificate directory must be generated by cert tool"
  echo "Example: provision_startup.sh ../cert-tool/Certificates/"
  exit 1
fi

if [ -d "$1" ]
then
    # TODO : We can check directory sanity as per cert-tool requirement here
    export CERTIFICATES_PATH=$(dirname $(readlink -e $1))/$(basename $1)
else
    echo "$1 directory doesn't exist"
fi

echo "0.1 Setting up $IEI_INSTALL_PATH directory and copying all the necessary config files..."
if [ "$2" = "deploy_mode" ]
then
	source ./setenv.sh
else
	source ./init.sh
fi

echo "0.2 Deleting any pre-provisioned vault data before proceeding..."
rm -rf $IEI_INSTALL_PATH/secret_store

echo "0.3 Updating .env for container timezone..."
# Get Docker Host timezone
hostTimezone=`timedatectl status | grep "zone" | sed -e 's/^[ ]*Time zone: \(.*\) (.*)$/\1/g'`
hostTimezone=`echo $hostTimezone`

# This will remove the HOST_TIME_ZONE entry if it exists and adds a new one with the right timezone
sed -i '/HOST_TIME_ZONE/d' .env && echo "HOST_TIME_ZONE=$hostTimezone" >> .env


echo "1. create $IEI_USER_NAME if it doesn't exists. Update UID from env if already exits with different UID"
if ! id $IEI_USER_NAME >/dev/null 2>&1; then
    groupadd $IEI_USER_NAME -g $IEI_UID
    useradd -r -u $IEI_UID -g $IEI_USER_NAME $IEI_USER_NAME
else
	if ! [ $(id -u $IEI_USER_NAME) = $IEI_UID ]; then
		usermod -u $IEI_UID $IEI_USER_NAME
		groupmod -g $IEI_UID $IEI_USER_NAME
	fi
fi

if [ "$TPM_ENABLE" = "true" ]
then
	OVERRIDE_COMPOSE_YML="-f provision-compose.override.yml"
	chown $IEI_USER_NAME /dev/tpm0
fi

echo "2. Removing previous iei/provisioning containers if existed..."
docker-compose down --remove-orphans
docker-compose -f provision-compose.yml $OVERRIDE_COMPOSE_YML down

echo "Remove the influx/imagestore data..."
rm -rf $IEI_INSTALL_PATH/data

if [ "$2" != "deploy_mode" ]
then
	echo "3. Buidling the provisioning containers..."

	# set .dockerignore to the base one
	ln -sf docker_setup/dockerignores/.dockerignore ../.dockerignore

	services=(ia_gobase ia_provision)
	servDockerIgnore=(.dockerignore.common .dockerignore.provision)

	count=0
	echo "services: ${services[@]}"
	for service in "${services[@]}"
	do
	    echo "Building $service image..."
	    ln -sf docker_setup/dockerignores/${servDockerIgnore[$count]} ../.dockerignore
	    docker-compose -f provision-compose.yml $OVERRIDE_COMPOSE_YML build --build-arg HOST_TIME_ZONE="$hostTimezone" $service
	    errorCode=`echo $?`
	    if [ $errorCode != "0" ]; then
		echo "docker-compose build failed for $service..."
		exit -1
	    fi
	    count=$((count+1))
	done
fi

echo "4. Creating and starting the provisioning containers..."
docker-compose -f provision-compose.yml $OVERRIDE_COMPOSE_YML up
docker-compose -f provision-compose.yml $OVERRIDE_COMPOSE_YML down

# IEI containers will be executed as ieiuser
chown -R $IEI_USER_NAME:$IEI_USER_NAME $IEI_INSTALL_PATH
