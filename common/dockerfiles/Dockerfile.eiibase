# Copyright (c) 2020 Intel Corporation.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# EII Base Dockerfile
ARG UBUNTU_IMAGE_VERSION
FROM ubuntu:$UBUNTU_IMAGE_VERSION as base
LABEL description="EII Base Image"

ARG HOST_TIME_ZONE
# Setting timezone inside the container
RUN echo "$HOST_TIME_ZONE" >/etc/timezone && \
    cat /etc/timezone && \
    apt-get update && \
    apt-get install -y tzdata && \
    ln -sf /usr/share/zoneinfo/${HOST_TIME_ZONE} /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata && \
    rm -rf /var/lib/apt/lists/*

# Setting C/C++ dev env and installing build related tools
RUN apt-get update && \
    apt-get install -y --no-install-recommends build-essential \
                       git \
                       pkg-config \
                       software-properties-common \
                       wget && \
    rm -rf /var/lib/apt/lists/* && \
    wget -qO- https://cmake.org/files/v3.15/cmake-3.15.0-Linux-x86_64.tar.gz | \
    tar --strip-components=1 -xz -C /usr/local
ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/usr/local/lib:/usr/local/lib/udfs/

# Setting Golang dev env
ARG GO_VERSION
RUN wget -q --show-progress https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz && \
    rm -rf go${GO_VERSION}.linux-amd64.tar.gz
# These flags are needed for enabling security while compiling and linking with cpuidcheck in golang
ENV CGO_CFLAGS="$CGO_FLAGS -O2 -D_FORTIFY_SOURCE=2 -Werror=format-security -fstack-protector-strong -fPIC" \
    CGO_LDFLAGS="$CGO_LDFLAGS -z noexecstack -z relro -z now"
ENV GOPATH="$HOME/go"
ENV PATH="$PATH:/usr/local/go/bin"

# Setting python dev env
ARG PYTHON_VERSION
RUN apt-get update && \
    apt-get install -y --no-install-recommends python${PYTHON_VERSION} \
                       python${PYTHON_VERSION}-dev \
                       python3-distutils \
                       python3-setuptools \
                       python3-pip && \
    python${PYTHON_VERSION} -m pip install -U pip && \
    ln -sf /usr/bin/pip /usr/bin/pip3 && \
    rm -rf /var/lib/apt/lists/*
ENV PYTHONPATH $PYTHONPATH:/usr/local/lib/python3.8/dist-packages

HEALTHCHECK NONE
