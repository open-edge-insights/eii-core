# Copyright (c) 2020 Intel Corporation.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# EII Base Dockerfile for Go modules

ARG UBUNTU_IMAGE_VERSION
FROM ubuntu:$UBUNTU_IMAGE_VERSION
LABEL description="EII Base Image"

ARG HOST_TIME_ZONE=""

ENV GO_WORK_DIR /EII/go/src/IEdgeInsights
ENV GOPATH="/EII/go"
ENV PATH ${PATH}:/usr/local/go/bin:${GOPATH}/bin

WORKDIR ${GO_WORK_DIR}

#Installing Go and dep package manager tool for Go
ARG GO_VERSION
RUN apt-get update && \
    apt-get install -y wget git build-essential pkg-config software-properties-common g++ && \
    wget https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz

ARG DEBIAN_FRONTEND=noninteractive
# Setting timezone inside the container
RUN echo "$HOST_TIME_ZONE" >/etc/timezone && \
    cat /etc/timezone && \
    apt-get install -y tzdata && \ 
    ln -sf /usr/share/zoneinfo/${HOST_TIME_ZONE} /etc/localtime && \
    dpkg-reconfigure -f noninteractive tzdata

ENV GLOG_GO_PATH ${GOPATH}/src/github.com/golang/glog
ENV GLOG_VER 23def4e6c14b4da8ac2ed8007337bc5eb5007998
RUN mkdir -p ${GLOG_GO_PATH} && \
    git clone https://github.com/golang/glog ${GLOG_GO_PATH} && \
    cd ${GLOG_GO_PATH} && \
    git checkout -b ${GLOG_VER} ${GLOG_VER}

# This is a dependency for gojsonschema and is not used directly by source code
ENV GO_JSON_REFERENCE ${GOPATH}/src/github.com/xeipuuv/gojsonreference
RUN mkdir -p ${GO_JSON_REFERENCE} && \
    git clone https://github.com/xeipuuv/gojsonreference ${GO_JSON_REFERENCE} && \
    cd ${GO_JSON_REFERENCE} && \
    git checkout -b known_version bd5ef7bd5415a7ac448318e64f11a24cd21e594b

# This is a dependency for gojsonschema and is not used directly by source code
ENV GO_JSON_POINTER ${GOPATH}/src/github.com/xeipuuv/gojsonpointer
RUN mkdir -p ${GO_JSON_POINTER} && \
    git clone https://github.com/xeipuuv/gojsonpointer ${GO_JSON_POINTER} && \
    cd ${GO_JSON_POINTER} && \
    git checkout -b known_version 4e3ac2762d5f479393488629ee9370b50873b3a6

# Installing Go JSON schema validator
ENV GO_JSON_SCHEMA ${GOPATH}/src/github.com/xeipuuv/gojsonschema
RUN mkdir -p ${GO_JSON_SCHEMA} && \
    git clone https://github.com/xeipuuv/gojsonschema ${GO_JSON_SCHEMA} && \
    cd ${GO_JSON_SCHEMA} && \
    git checkout -b known_version 82fcdeb203eb6ab2a67d0a623d9c19e5e5a64927

RUN wget -qO- https://cmake.org/files/v3.15/cmake-3.15.0-Linux-x86_64.tar.gz | \
    tar --strip-components=1 -xz -C /usr/local

# These flags are needed for enabling security while compiling and linking with c libs via cgo
ENV CGO_CFLAGS "$CGO_FLAGS -O2 -D_FORTIFY_SOURCE=2 -Werror=format-security -fstack-protector-strong -fPIC"
ENV CGO_LDFLAGS "$CGO_LDFLAGS -z noexecstack -z relro -z now"

ENV PY_WORK_DIR /EII
WORKDIR ${PY_WORK_DIR}

# Installing python 3.6 and pip3.6
RUN add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.6 python3.6-dev python3-distutils python3-pip \
                       libsm6 libxext6 libfontconfig1 libxrender1

RUN ln -sf /usr/bin/pip3 /usr/bin/pip3.6
# Sticking to pip version that is same as the one in the
# openvino base image version in Dockerfile.openvino
RUN pip3 install pip==21.0.1

# Installing EIIMessageBus dependencies
COPY libs/EIIMessageBus/install.sh libs/EIIMessageBus/install.sh
COPY libs/EIIMessageBus/python/requirements.txt libs/EIIMessageBus/python/requirements.txt
RUN cd libs/EIIMessageBus && \
    ./install.sh --cython

# Installing ConfigMgr dependencies
COPY libs/ConfigMgr/install.sh libs/ConfigMgr/install.sh
RUN ./libs/ConfigMgr/install.sh

COPY util/requirements.txt util/requirements.txt
RUN pip3 install -r util/requirements.txt

ENV LD_LIBRARY_PATH "/usr/local/lib"

RUN rm -rf /usr/local/bin/ccmake && \
    rm -rf /usr/local/bin/cmake-gui && \
    rm -rf /usr/local/bin/cpack && \
    rm -rf /usr/local/bin/ctest &&  \
    rm -rf /usr/local/doc && \
    rm -rf /usr/local/man && \
    rm -rf /usr/local/share/aclocal && \
    rm -rf /usr/local/share/applications && \
    rm -rf /usr/local/share/icons && \
    rm -rf /usr/local/share/mime
HEALTHCHECK NONE
