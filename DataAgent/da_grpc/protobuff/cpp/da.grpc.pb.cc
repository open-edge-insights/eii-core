// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: da.proto

#include "da.pb.h"
#include "da.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace DataAgent {

static const char* da_method_names[] = {
  "/DataAgent.da/Config",
  "/DataAgent.da/Query",
  "/DataAgent.da/GetBlob",
};

std::unique_ptr< da::Stub> da::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< da::Stub> stub(new da::Stub(channel));
  return stub;
}

da::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Config_(da_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_(da_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlob_(da_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status da::Stub::Config(::grpc::ClientContext* context, const ::DataAgent::ConfigReq& request, ::DataAgent::ConfigResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Config_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataAgent::ConfigResp>* da::Stub::AsyncConfigRaw(::grpc::ClientContext* context, const ::DataAgent::ConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DataAgent::ConfigResp>::Create(channel_.get(), cq, rpcmethod_Config_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DataAgent::ConfigResp>* da::Stub::PrepareAsyncConfigRaw(::grpc::ClientContext* context, const ::DataAgent::ConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DataAgent::ConfigResp>::Create(channel_.get(), cq, rpcmethod_Config_, context, request, false);
}

::grpc::Status da::Stub::Query(::grpc::ClientContext* context, const ::DataAgent::QueryReq& request, ::DataAgent::QueryResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Query_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::DataAgent::QueryResp>* da::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::DataAgent::QueryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DataAgent::QueryResp>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::DataAgent::QueryResp>* da::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::DataAgent::QueryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::DataAgent::QueryResp>::Create(channel_.get(), cq, rpcmethod_Query_, context, request, false);
}

::grpc::ClientReader< ::DataAgent::Chunk>* da::Stub::GetBlobRaw(::grpc::ClientContext* context, const ::DataAgent::BlobReq& request) {
  return ::grpc::internal::ClientReaderFactory< ::DataAgent::Chunk>::Create(channel_.get(), rpcmethod_GetBlob_, context, request);
}

::grpc::ClientAsyncReader< ::DataAgent::Chunk>* da::Stub::AsyncGetBlobRaw(::grpc::ClientContext* context, const ::DataAgent::BlobReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::DataAgent::Chunk>::Create(channel_.get(), cq, rpcmethod_GetBlob_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::DataAgent::Chunk>* da::Stub::PrepareAsyncGetBlobRaw(::grpc::ClientContext* context, const ::DataAgent::BlobReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::DataAgent::Chunk>::Create(channel_.get(), cq, rpcmethod_GetBlob_, context, request, false, nullptr);
}

da::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      da_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< da::Service, ::DataAgent::ConfigReq, ::DataAgent::ConfigResp>(
          std::mem_fn(&da::Service::Config), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      da_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< da::Service, ::DataAgent::QueryReq, ::DataAgent::QueryResp>(
          std::mem_fn(&da::Service::Query), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      da_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< da::Service, ::DataAgent::BlobReq, ::DataAgent::Chunk>(
          std::mem_fn(&da::Service::GetBlob), this)));
}

da::Service::~Service() {
}

::grpc::Status da::Service::Config(::grpc::ServerContext* context, const ::DataAgent::ConfigReq* request, ::DataAgent::ConfigResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status da::Service::Query(::grpc::ServerContext* context, const ::DataAgent::QueryReq* request, ::DataAgent::QueryResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status da::Service::GetBlob(::grpc::ServerContext* context, const ::DataAgent::BlobReq* request, ::grpc::ServerWriter< ::DataAgent::Chunk>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace DataAgent

