// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: da.proto

#ifndef PROTOBUF_da_2eproto__INCLUDED
#define PROTOBUF_da_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_da_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBlobReqImpl();
void InitDefaultsBlobReq();
void InitDefaultsChunkImpl();
void InitDefaultsChunk();
void InitDefaultsConfigIntReqImpl();
void InitDefaultsConfigIntReq();
void InitDefaultsConfigIntRespImpl();
void InitDefaultsConfigIntResp();
void InitDefaultsQueryReqImpl();
void InitDefaultsQueryReq();
void InitDefaultsQueryRespImpl();
void InitDefaultsQueryResp();
void InitDefaultsConfigReqImpl();
void InitDefaultsConfigReq();
void InitDefaultsConfigRespImpl();
void InitDefaultsConfigResp();
inline void InitDefaults() {
  InitDefaultsBlobReq();
  InitDefaultsChunk();
  InitDefaultsConfigIntReq();
  InitDefaultsConfigIntResp();
  InitDefaultsQueryReq();
  InitDefaultsQueryResp();
  InitDefaultsConfigReq();
  InitDefaultsConfigResp();
}
}  // namespace protobuf_da_2eproto
namespace DataAgent {
class BlobReq;
class BlobReqDefaultTypeInternal;
extern BlobReqDefaultTypeInternal _BlobReq_default_instance_;
class Chunk;
class ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class ConfigIntReq;
class ConfigIntReqDefaultTypeInternal;
extern ConfigIntReqDefaultTypeInternal _ConfigIntReq_default_instance_;
class ConfigIntResp;
class ConfigIntRespDefaultTypeInternal;
extern ConfigIntRespDefaultTypeInternal _ConfigIntResp_default_instance_;
class ConfigReq;
class ConfigReqDefaultTypeInternal;
extern ConfigReqDefaultTypeInternal _ConfigReq_default_instance_;
class ConfigResp;
class ConfigRespDefaultTypeInternal;
extern ConfigRespDefaultTypeInternal _ConfigResp_default_instance_;
class QueryReq;
class QueryReqDefaultTypeInternal;
extern QueryReqDefaultTypeInternal _QueryReq_default_instance_;
class QueryResp;
class QueryRespDefaultTypeInternal;
extern QueryRespDefaultTypeInternal _QueryResp_default_instance_;
}  // namespace DataAgent
namespace DataAgent {

// ===================================================================

class BlobReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataAgent.BlobReq) */ {
 public:
  BlobReq();
  virtual ~BlobReq();

  BlobReq(const BlobReq& from);

  inline BlobReq& operator=(const BlobReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlobReq(BlobReq&& from) noexcept
    : BlobReq() {
    *this = ::std::move(from);
  }

  inline BlobReq& operator=(BlobReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobReq* internal_default_instance() {
    return reinterpret_cast<const BlobReq*>(
               &_BlobReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BlobReq* other);
  friend void swap(BlobReq& a, BlobReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobReq* New() const PROTOBUF_FINAL { return New(NULL); }

  BlobReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BlobReq& from);
  void MergeFrom(const BlobReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BlobReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string imgHandle = 1;
  void clear_imghandle();
  static const int kImgHandleFieldNumber = 1;
  const ::std::string& imghandle() const;
  void set_imghandle(const ::std::string& value);
  #if LANG_CXX11
  void set_imghandle(::std::string&& value);
  #endif
  void set_imghandle(const char* value);
  void set_imghandle(const char* value, size_t size);
  ::std::string* mutable_imghandle();
  ::std::string* release_imghandle();
  void set_allocated_imghandle(::std::string* imghandle);

  // @@protoc_insertion_point(class_scope:DataAgent.BlobReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imghandle_;
  mutable int _cached_size_;
  friend struct ::protobuf_da_2eproto::TableStruct;
  friend void ::protobuf_da_2eproto::InitDefaultsBlobReqImpl();
};
// -------------------------------------------------------------------

class Chunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataAgent.Chunk) */ {
 public:
  Chunk();
  virtual ~Chunk();

  Chunk(const Chunk& from);

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(Chunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Chunk* other);
  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chunk* New() const PROTOBUF_FINAL { return New(NULL); }

  Chunk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Chunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes chunk = 1;
  void clear_chunk();
  static const int kChunkFieldNumber = 1;
  const ::std::string& chunk() const;
  void set_chunk(const ::std::string& value);
  #if LANG_CXX11
  void set_chunk(::std::string&& value);
  #endif
  void set_chunk(const char* value);
  void set_chunk(const void* value, size_t size);
  ::std::string* mutable_chunk();
  ::std::string* release_chunk();
  void set_allocated_chunk(::std::string* chunk);

  // @@protoc_insertion_point(class_scope:DataAgent.Chunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chunk_;
  mutable int _cached_size_;
  friend struct ::protobuf_da_2eproto::TableStruct;
  friend void ::protobuf_da_2eproto::InitDefaultsChunkImpl();
};
// -------------------------------------------------------------------

class ConfigIntReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataAgent.ConfigIntReq) */ {
 public:
  ConfigIntReq();
  virtual ~ConfigIntReq();

  ConfigIntReq(const ConfigIntReq& from);

  inline ConfigIntReq& operator=(const ConfigIntReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigIntReq(ConfigIntReq&& from) noexcept
    : ConfigIntReq() {
    *this = ::std::move(from);
  }

  inline ConfigIntReq& operator=(ConfigIntReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigIntReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigIntReq* internal_default_instance() {
    return reinterpret_cast<const ConfigIntReq*>(
               &_ConfigIntReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ConfigIntReq* other);
  friend void swap(ConfigIntReq& a, ConfigIntReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigIntReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigIntReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigIntReq& from);
  void MergeFrom(const ConfigIntReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigIntReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cfgType = 1;
  void clear_cfgtype();
  static const int kCfgTypeFieldNumber = 1;
  const ::std::string& cfgtype() const;
  void set_cfgtype(const ::std::string& value);
  #if LANG_CXX11
  void set_cfgtype(::std::string&& value);
  #endif
  void set_cfgtype(const char* value);
  void set_cfgtype(const char* value, size_t size);
  ::std::string* mutable_cfgtype();
  ::std::string* release_cfgtype();
  void set_allocated_cfgtype(::std::string* cfgtype);

  // @@protoc_insertion_point(class_scope:DataAgent.ConfigIntReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cfgtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_da_2eproto::TableStruct;
  friend void ::protobuf_da_2eproto::InitDefaultsConfigIntReqImpl();
};
// -------------------------------------------------------------------

class ConfigIntResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataAgent.ConfigIntResp) */ {
 public:
  ConfigIntResp();
  virtual ~ConfigIntResp();

  ConfigIntResp(const ConfigIntResp& from);

  inline ConfigIntResp& operator=(const ConfigIntResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigIntResp(ConfigIntResp&& from) noexcept
    : ConfigIntResp() {
    *this = ::std::move(from);
  }

  inline ConfigIntResp& operator=(ConfigIntResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigIntResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigIntResp* internal_default_instance() {
    return reinterpret_cast<const ConfigIntResp*>(
               &_ConfigIntResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ConfigIntResp* other);
  friend void swap(ConfigIntResp& a, ConfigIntResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigIntResp* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigIntResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigIntResp& from);
  void MergeFrom(const ConfigIntResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigIntResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string jsonMsg = 1;
  void clear_jsonmsg();
  static const int kJsonMsgFieldNumber = 1;
  const ::std::string& jsonmsg() const;
  void set_jsonmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_jsonmsg(::std::string&& value);
  #endif
  void set_jsonmsg(const char* value);
  void set_jsonmsg(const char* value, size_t size);
  ::std::string* mutable_jsonmsg();
  ::std::string* release_jsonmsg();
  void set_allocated_jsonmsg(::std::string* jsonmsg);

  // @@protoc_insertion_point(class_scope:DataAgent.ConfigIntResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr jsonmsg_;
  mutable int _cached_size_;
  friend struct ::protobuf_da_2eproto::TableStruct;
  friend void ::protobuf_da_2eproto::InitDefaultsConfigIntRespImpl();
};
// -------------------------------------------------------------------

class QueryReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataAgent.QueryReq) */ {
 public:
  QueryReq();
  virtual ~QueryReq();

  QueryReq(const QueryReq& from);

  inline QueryReq& operator=(const QueryReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryReq(QueryReq&& from) noexcept
    : QueryReq() {
    *this = ::std::move(from);
  }

  inline QueryReq& operator=(QueryReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryReq* internal_default_instance() {
    return reinterpret_cast<const QueryReq*>(
               &_QueryReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(QueryReq* other);
  friend void swap(QueryReq& a, QueryReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryReq* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryReq& from);
  void MergeFrom(const QueryReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DataAgent.QueryReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_da_2eproto::TableStruct;
  friend void ::protobuf_da_2eproto::InitDefaultsQueryReqImpl();
};
// -------------------------------------------------------------------

class QueryResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataAgent.QueryResp) */ {
 public:
  QueryResp();
  virtual ~QueryResp();

  QueryResp(const QueryResp& from);

  inline QueryResp& operator=(const QueryResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResp(QueryResp&& from) noexcept
    : QueryResp() {
    *this = ::std::move(from);
  }

  inline QueryResp& operator=(QueryResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResp* internal_default_instance() {
    return reinterpret_cast<const QueryResp*>(
               &_QueryResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(QueryResp* other);
  friend void swap(QueryResp& a, QueryResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResp* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryResp& from);
  void MergeFrom(const QueryResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DataAgent.QueryResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_da_2eproto::TableStruct;
  friend void ::protobuf_da_2eproto::InitDefaultsQueryRespImpl();
};
// -------------------------------------------------------------------

class ConfigReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataAgent.ConfigReq) */ {
 public:
  ConfigReq();
  virtual ~ConfigReq();

  ConfigReq(const ConfigReq& from);

  inline ConfigReq& operator=(const ConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigReq(ConfigReq&& from) noexcept
    : ConfigReq() {
    *this = ::std::move(from);
  }

  inline ConfigReq& operator=(ConfigReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigReq* internal_default_instance() {
    return reinterpret_cast<const ConfigReq*>(
               &_ConfigReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ConfigReq* other);
  friend void swap(ConfigReq& a, ConfigReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigReq& from);
  void MergeFrom(const ConfigReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DataAgent.ConfigReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_da_2eproto::TableStruct;
  friend void ::protobuf_da_2eproto::InitDefaultsConfigReqImpl();
};
// -------------------------------------------------------------------

class ConfigResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataAgent.ConfigResp) */ {
 public:
  ConfigResp();
  virtual ~ConfigResp();

  ConfigResp(const ConfigResp& from);

  inline ConfigResp& operator=(const ConfigResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigResp(ConfigResp&& from) noexcept
    : ConfigResp() {
    *this = ::std::move(from);
  }

  inline ConfigResp& operator=(ConfigResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigResp* internal_default_instance() {
    return reinterpret_cast<const ConfigResp*>(
               &_ConfigResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ConfigResp* other);
  friend void swap(ConfigResp& a, ConfigResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigResp* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigResp& from);
  void MergeFrom(const ConfigResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DataAgent.ConfigResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_da_2eproto::TableStruct;
  friend void ::protobuf_da_2eproto::InitDefaultsConfigRespImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlobReq

// string imgHandle = 1;
inline void BlobReq::clear_imghandle() {
  imghandle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlobReq::imghandle() const {
  // @@protoc_insertion_point(field_get:DataAgent.BlobReq.imgHandle)
  return imghandle_.GetNoArena();
}
inline void BlobReq::set_imghandle(const ::std::string& value) {
  
  imghandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataAgent.BlobReq.imgHandle)
}
#if LANG_CXX11
inline void BlobReq::set_imghandle(::std::string&& value) {
  
  imghandle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataAgent.BlobReq.imgHandle)
}
#endif
inline void BlobReq::set_imghandle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imghandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataAgent.BlobReq.imgHandle)
}
inline void BlobReq::set_imghandle(const char* value, size_t size) {
  
  imghandle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataAgent.BlobReq.imgHandle)
}
inline ::std::string* BlobReq::mutable_imghandle() {
  
  // @@protoc_insertion_point(field_mutable:DataAgent.BlobReq.imgHandle)
  return imghandle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlobReq::release_imghandle() {
  // @@protoc_insertion_point(field_release:DataAgent.BlobReq.imgHandle)
  
  return imghandle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobReq::set_allocated_imghandle(::std::string* imghandle) {
  if (imghandle != NULL) {
    
  } else {
    
  }
  imghandle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imghandle);
  // @@protoc_insertion_point(field_set_allocated:DataAgent.BlobReq.imgHandle)
}

// -------------------------------------------------------------------

// Chunk

// bytes chunk = 1;
inline void Chunk::clear_chunk() {
  chunk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chunk::chunk() const {
  // @@protoc_insertion_point(field_get:DataAgent.Chunk.chunk)
  return chunk_.GetNoArena();
}
inline void Chunk::set_chunk(const ::std::string& value) {
  
  chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataAgent.Chunk.chunk)
}
#if LANG_CXX11
inline void Chunk::set_chunk(::std::string&& value) {
  
  chunk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataAgent.Chunk.chunk)
}
#endif
inline void Chunk::set_chunk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataAgent.Chunk.chunk)
}
inline void Chunk::set_chunk(const void* value, size_t size) {
  
  chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataAgent.Chunk.chunk)
}
inline ::std::string* Chunk::mutable_chunk() {
  
  // @@protoc_insertion_point(field_mutable:DataAgent.Chunk.chunk)
  return chunk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chunk::release_chunk() {
  // @@protoc_insertion_point(field_release:DataAgent.Chunk.chunk)
  
  return chunk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chunk::set_allocated_chunk(::std::string* chunk) {
  if (chunk != NULL) {
    
  } else {
    
  }
  chunk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chunk);
  // @@protoc_insertion_point(field_set_allocated:DataAgent.Chunk.chunk)
}

// -------------------------------------------------------------------

// ConfigIntReq

// string cfgType = 1;
inline void ConfigIntReq::clear_cfgtype() {
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigIntReq::cfgtype() const {
  // @@protoc_insertion_point(field_get:DataAgent.ConfigIntReq.cfgType)
  return cfgtype_.GetNoArena();
}
inline void ConfigIntReq::set_cfgtype(const ::std::string& value) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataAgent.ConfigIntReq.cfgType)
}
#if LANG_CXX11
inline void ConfigIntReq::set_cfgtype(::std::string&& value) {
  
  cfgtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataAgent.ConfigIntReq.cfgType)
}
#endif
inline void ConfigIntReq::set_cfgtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataAgent.ConfigIntReq.cfgType)
}
inline void ConfigIntReq::set_cfgtype(const char* value, size_t size) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataAgent.ConfigIntReq.cfgType)
}
inline ::std::string* ConfigIntReq::mutable_cfgtype() {
  
  // @@protoc_insertion_point(field_mutable:DataAgent.ConfigIntReq.cfgType)
  return cfgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigIntReq::release_cfgtype() {
  // @@protoc_insertion_point(field_release:DataAgent.ConfigIntReq.cfgType)
  
  return cfgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigIntReq::set_allocated_cfgtype(::std::string* cfgtype) {
  if (cfgtype != NULL) {
    
  } else {
    
  }
  cfgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfgtype);
  // @@protoc_insertion_point(field_set_allocated:DataAgent.ConfigIntReq.cfgType)
}

// -------------------------------------------------------------------

// ConfigIntResp

// string jsonMsg = 1;
inline void ConfigIntResp::clear_jsonmsg() {
  jsonmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigIntResp::jsonmsg() const {
  // @@protoc_insertion_point(field_get:DataAgent.ConfigIntResp.jsonMsg)
  return jsonmsg_.GetNoArena();
}
inline void ConfigIntResp::set_jsonmsg(const ::std::string& value) {
  
  jsonmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataAgent.ConfigIntResp.jsonMsg)
}
#if LANG_CXX11
inline void ConfigIntResp::set_jsonmsg(::std::string&& value) {
  
  jsonmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataAgent.ConfigIntResp.jsonMsg)
}
#endif
inline void ConfigIntResp::set_jsonmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jsonmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataAgent.ConfigIntResp.jsonMsg)
}
inline void ConfigIntResp::set_jsonmsg(const char* value, size_t size) {
  
  jsonmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataAgent.ConfigIntResp.jsonMsg)
}
inline ::std::string* ConfigIntResp::mutable_jsonmsg() {
  
  // @@protoc_insertion_point(field_mutable:DataAgent.ConfigIntResp.jsonMsg)
  return jsonmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigIntResp::release_jsonmsg() {
  // @@protoc_insertion_point(field_release:DataAgent.ConfigIntResp.jsonMsg)
  
  return jsonmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigIntResp::set_allocated_jsonmsg(::std::string* jsonmsg) {
  if (jsonmsg != NULL) {
    
  } else {
    
  }
  jsonmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jsonmsg);
  // @@protoc_insertion_point(field_set_allocated:DataAgent.ConfigIntResp.jsonMsg)
}

// -------------------------------------------------------------------

// QueryReq

// -------------------------------------------------------------------

// QueryResp

// -------------------------------------------------------------------

// ConfigReq

// -------------------------------------------------------------------

// ConfigResp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataAgent

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_da_2eproto__INCLUDED
